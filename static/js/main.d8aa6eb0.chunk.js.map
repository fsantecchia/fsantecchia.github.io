{"version":3,"sources":["../node_modules/prettier sync","logo.svg","testFileGenerator.ts","App.js","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","LINE_BREAK","App","isAsync","modules","selectedModuleName","selectedModuleParams","testSuite","tryCatchCases","APP","LogicalBranchesGenerator","testNode","_logicalBranches","_testNode","_describe","generateDescribe","condition","generate","replace","Describe","generateBranchesByTestNode","isMainNode","type","push","name","left","right","generateTestCases","forEach","branch","itName","it","It","generateStructure","addTestCase","getDescribe","this","description","_description","_describes","_testCases","addDiscribe","discribe","testCase","finish","map","join","_lines","addLine","line","addEmptyLine","getParamsAssigment","getFunctionCall","getParamNameByNode","paramNode","params","properties","innerParamNode","key","paramName","getModules","visitor","ExportNamedDeclaration","path","node","declaration","declarationType","declarations","specifiers","length","specifier","exported","ExportDefaultDeclaration","getNodes","IfStatement","enter","logicalBranchesGenerator","test","ConditionalExpression","TryStatement","uniTestCase","buildTestFile","givenCode","functionName","transformSync","presets","typescriptPreset","plugins","filename","selectedModule","find","async","firstIt","codeToTransform","MODULE_NAME","TEST_CASES","TEMPLATE","prettier","format","singleQuote","tabWidth","parser","babelParser","className","rows","cols","placeholder","onClick","document","getElementById","value","finalCode","testFileGenerator","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d8aa6eb0.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 185;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// @ts-nocheck\r\nimport { transformSync, Node } from \"@babel/core\";\r\nimport typescriptPreset from \"@babel/preset-typescript\";\r\nimport generate from '@babel/generator';\r\nimport prettier from 'prettier';\r\nimport babelParser from 'prettier/parser-babel';\r\n\r\nconst FILE = './code-to-test.ts';\r\nconst LINE_BREAK = '\\n';\r\nconst LINE_BREAK_DOUBLE = '\\n\\n';\r\n\r\nconst TEMPLATE = ({\r\n  MODULE_NAME,\r\n  TEST_CASES\r\n}: {\r\n  MODULE_NAME: string;\r\n  TEST_CASES: string;\r\n}) => {return `\r\n  // File generated by fabra\r\n\r\n  import ${MODULE_NAME} from '../${MODULE_NAME}'\r\n\r\n  ${TEST_CASES}\r\n`};\r\n\r\nclass App {\r\n  isAsync = true;\r\n  modules = [];\r\n  selectedModuleName = '';\r\n  selectedModuleParams: Node[] = [];\r\n  testSuite: Describe; // main Describe\r\n  tryCatchCases: It[] = [];\r\n}\r\nlet APP = new App();\r\n\r\nclass LogicalBranchesGenerator {\r\n  constructor(testNode) {\r\n    this._testNode = testNode;\r\n    this.generateDescribe()\r\n    this.generateBranchesByTestNode(this._testNode, true);\r\n    this.generateTestCases();\r\n  } \r\n\r\n  private _logicalBranches = [];\r\n  private _testNode: Node;\r\n  private _describe: Describe = null;\r\n\r\n  private generateDescribe = () => {\r\n    const condition = '`if(' + generate(this._testNode).code.replace(/'/g, '`').replace(/\\n/g, ' ')+ ')`';\r\n    this._describe = new Describe(`Logical Branches generated by ${condition}`);\r\n  }\r\n\r\n  // testNode => path.node.test\r\n  private generateBranchesByTestNode = (testNode: Node, isMainNode: boolean) => {\r\n    if (testNode.type === 'LogicalExpression') {\r\n      if (isMainNode) {\r\n        this._logicalBranches.push({\r\n          name: '`the condition returns true`'\r\n        })\r\n        this._logicalBranches.push({\r\n          name: '`the condition returns false`'\r\n        })\r\n      }\r\n\r\n\r\n      this.generateBranchesByTestNode(testNode.left, false);\r\n      this.generateBranchesByTestNode(testNode.right, false);\r\n    } else {\r\n      this._logicalBranches.push({\r\n        name: '`' + generate(testNode).code + ' returns true' + '`'\r\n      })\r\n      this._logicalBranches.push({\r\n        name: '`' + generate(testNode).code + ' returns false' + '`'\r\n      })\r\n    }\r\n  }\r\n\r\n  private generateTestCases = () => {\r\n    this._logicalBranches.forEach((branch) => {\r\n      const itName = `should work when ${branch.name.replace(/'/g, '`').replace(/\\n/g, ' ')}`;\r\n\r\n      const it = new It(itName);\r\n      it.generateStructure();\r\n\r\n      this._describe.addTestCase(it)\r\n    })\r\n  }\r\n\r\n  getDescribe = () => {\r\n    return this._describe;\r\n  }\r\n}\r\n\r\nclass Describe {\r\n  constructor(description) {\r\n    this._description = description;\r\n  }\r\n\r\n  private _description: string;\r\n  private _describes: Describe[] = [];\r\n  private _testCases: It[] = [];\r\n\r\n  addDiscribe = (discribe: Describe) => {\r\n    this._describes.push(discribe);\r\n  }\r\n\r\n  addTestCase = (testCase: It) => {\r\n    this._testCases.push(testCase);\r\n  }\r\n\r\n  finish = () => {\r\n    return `describe('${this._description}', () => {\r\n      beforeEach(async () => {});\r\n\r\n      ${this._testCases.map((it) => it.finish()).join(LINE_BREAK_DOUBLE)}\r\n    })`\r\n  }\r\n}\r\n\r\nclass It {\r\n  constructor(description) {\r\n    this._description = description;\r\n  }\r\n\r\n  private _description: string;\r\n  private _lines: string[] = []\r\n\r\n  addLine = (line: string) => {\r\n    this._lines.push(line);\r\n  }\r\n\r\n  addEmptyLine = () => {\r\n    this._lines.push(LINE_BREAK);\r\n  }\r\n\r\n  generateStructure = () => {\r\n    this._lines.push(getParamsAssigment());\r\n    this._lines.push(LINE_BREAK);\r\n    this._lines.push(getFunctionCall());\r\n  }\r\n\r\n  finish = () => {\r\n    return `it('${this._description}', ${APP.isAsync ? 'async' : ''} () => {\r\n      ${this._lines.join(LINE_BREAK)}\r\n    })`\r\n  }\r\n}\r\n\r\n/* returns the param's name */\r\nconst getParamNameByNode = (paramNode: Node): string => {\r\n  if (paramNode.type === 'Identifier') {\r\n    return paramNode.name;\r\n\r\n  } else if (paramNode.type === 'AssignmentPattern') {\r\n    return getParamNameByNode(paramNode.left);\r\n\r\n    // Object as param\r\n  } else if (paramNode.type === 'ObjectPattern') {\r\n    const params: string[] = [];\r\n    paramNode.properties.forEach((innerParamNode) => {\r\n      params.push(getParamNameByNode(innerParamNode.key))\r\n    });\r\n    return `{ ${params.join(', ')} }`;\r\n\r\n  }\r\n}\r\n\r\n/* returns param1, param2, param3 */\r\nconst getParamsForFunction = (): string => {\r\n  return APP.selectedModuleParams.map((paramNode) => getParamNameByNode(paramNode)).join(', ');\r\n\r\n}\r\n\r\n/* returns const param1 = 'REPLACE'; const param2 = 'REPLACE'; */\r\nconst getParamsAssigment = (): string => {\r\n  const params: string[] = [];\r\n\r\n  APP.selectedModuleParams.forEach((paramNode) => {\r\n    // Object as params\r\n    if (paramNode.type === 'ObjectPattern') {\r\n      paramNode.properties.forEach((innerParamNode) => {\r\n        params.push(getParamNameByNode(innerParamNode.key))\r\n      });\r\n  \r\n    } else {\r\n      params.push(getParamNameByNode(paramNode))\r\n    }\r\n  })\r\n\r\n  const formattedAssigments = params.map((paramName) => {\r\n    return `const ${paramName} = 'REPLACE';`\r\n  })\r\n\r\n  return formattedAssigments.join(LINE_BREAK)\r\n}\r\n\r\n/* returns const result = function(param1, param2); */\r\nconst getFunctionCall = (): string => {\r\n  return `const result = ${APP.isAsync ? 'await' : ''} ${APP.selectedModuleName}(${getParamsForFunction()});`;\r\n}\r\n\r\nconst getModules = () => {\r\n  return {\r\n    visitor: {\r\n      ExportNamedDeclaration(path) {\r\n        if (path.node.declaration.id) {\r\n          APP.modules.push({\r\n            declarationType: path.node.declaration.id.type,\r\n            name: path.node.declaration.id.name,\r\n            node: path.node,\r\n            type: path.node.type,\r\n          });\r\n        }\r\n        if (path.node.declaration.declarations) {\r\n          path.node.declaration.declarations.forEach((declaration) => {\r\n            APP.modules.push({\r\n              declarationType: declaration.id.type,\r\n              name: declaration.id.name,\r\n              node: path.node,\r\n              type: path.node.type,\r\n            });\r\n          });\r\n        }\r\n        if (path.node.specifiers && path.node.specifiers.length >= 1) {\r\n          path.node.specifiers.forEach(specifier => {\r\n            APP.modules.push({\r\n              declarationType: specifier.exported.type,\r\n              name: specifier.exported.name,\r\n              node: path.node,\r\n              type: path.node.type,\r\n            });\r\n          });\r\n        }\r\n      },\r\n      ExportDefaultDeclaration(path) {\r\n        /*APP.modules.push({\r\n          declarationType: path.node.declaration.type,\r\n          name: 'default',\r\n          node: path.node,\r\n          type: path.node.type,\r\n        });*/\r\n\r\n        APP.modules.push({\r\n          declarationType: path.node.declaration.type,\r\n          name: path.node.declaration.id.name,\r\n          node: path.node,\r\n          type: path.node.type,\r\n        });\r\n      }\r\n      /*FunctionDeclaration: (path) => {\r\n        console.log(path)\r\n      }*/\r\n    }\r\n  }\r\n}\r\n\r\nconst getNodes = () => {\r\n  return {\r\n    visitor: {\r\n      IfStatement: {\r\n        enter: (path) => {\r\n          const logicalBranchesGenerator = new LogicalBranchesGenerator(path.node.test);\r\n          APP.testSuite.addDiscribe(logicalBranchesGenerator.getDescribe());\r\n        },\r\n      },\r\n      ConditionalExpression: {\r\n        enter: (path) => {\r\n          const logicalBranchesGenerator = new LogicalBranchesGenerator(path.node.test);\r\n          APP.testSuite.addDiscribe(logicalBranchesGenerator.getDescribe());\r\n        },\r\n      },\r\n      TryStatement: {\r\n        enter: () => {\r\n          const itName = `Error handling - should execute catch for try number ${APP.tryCatchCases.length}`;\r\n\r\n          const uniTestCase = new It(itName);\r\n          uniTestCase.generateStructure();\r\n          APP.tryCatchCases.push(uniTestCase);\r\n        },\r\n      },\r\n    }\r\n  };\r\n}\r\n\r\nconst buildTestFile = (givenCode, functionName) => {\r\n  APP = new App();\r\n\r\n  // Set APP.moduleForPlugin\r\n  transformSync(givenCode, {\r\n    presets: [typescriptPreset],\r\n    plugins: [getModules],\r\n    filename: './code3.ts'\r\n  });\r\n\r\n  // Set selected module values\r\n  const selectedModule = APP.modules.find(({ name }) => name === functionName);\r\n  APP.selectedModuleName = selectedModule.name\r\n  APP.selectedModuleParams = selectedModule.node.declaration.params;\r\n  APP.isAsync = selectedModule.node.declaration.async;\r\n\r\n  // Generate main describe\r\n  APP.testSuite = new Describe(`Module ${APP.selectedModuleName}`)\r\n\r\n  // Generate first it()\r\n  const firstIt = new It('Should work as expected')\r\n  firstIt.generateStructure();\r\n  APP.testSuite.addTestCase(firstIt);\r\n\r\n  // Parse AST to string\r\n  const codeToTransform = generate(selectedModule.node).code\r\n\r\n  transformSync(codeToTransform, {\r\n    presets: [typescriptPreset],\r\n    plugins: [getNodes],\r\n    filename: './code3.ts'\r\n  });\r\n\r\n  // Add try/catch statements at the end\r\n  APP.tryCatchCases.map(APP.testSuite.addTestCase)\r\n\r\n  const code = TEMPLATE({ \r\n    MODULE_NAME: APP.selectedModuleName,\r\n    TEST_CASES: APP.testSuite.finish(),\r\n   })\r\n\r\n  const finalCode = prettier.format(code, { singleQuote: true, tabWidth: 2, parser: 'babel', plugins: [babelParser] })\r\n\r\n  return finalCode;\r\n}\r\n\r\n\r\nexport default buildTestFile;","import logo from './logo.svg';\nimport testFileGenerator from './testFileGenerator';\nimport './App.css';\n\nfunction App() {\n\n  const generateUnitTestCases = () => {\n    const code = document.getElementById('code').value;\n    const functionName = document.getElementById('functionName').value;\n    const finalCode = testFileGenerator(code, functionName);\n\n    document.getElementById('generated').value = finalCode;\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        JS UNIT TEST FILE GENERATOR\n      </header>\n      <div>\n      <textarea name=\"code\" id=\"code\" rows=\"50\" cols=\"100\">Write something here</textarea>\n      <textarea name=\"generated\" id=\"generated\" rows=\"50\" cols=\"100\">Write something here</textarea>\n      <br />\n      <input placeholder=\"Function's name\" id=\"functionName\" /><button onClick={generateUnitTestCases}>Generate file</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}