{"version":3,"sources":["../node_modules/prettier sync","testFileGenerator.ts","App.tsx","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","LINE_BREAK","Describe","description","_description","_describes","_testCases","addDiscribe","discribe","push","addTestCase","testCase","getTestCasesLength","length","finish","map","it","join","describe","this","It","_lines","_calledFunctionNames","_comment","_hasReturnStatement","addLine","line","addEmptyLine","addComment","comment","addReturnStatement","addCalledFunctionName","functionName","addExpectsForReturnStatement","addExpectsForCallExpressions","generateStructure","getParamsAssigment","getFunctionCall","generateErrorStructure","APP","isAsync","App","modules","selectedModuleName","selectedModuleParams","testSuite","branches","tryCatchDescribe","mainIt","mainReturnStatement","doesThrowError","node","Boolean","body","some","childNode","type","isInMainBranch","path","parentPath","isInVariableDeclarator","capitalize","s","charAt","toUpperCase","slice","LogicalBranchesGenerator","statementNode","_logicalBranches","_statementNode","_testNode","_describe","generateBranchesByTestNode","testNode","isMainNode","left","right","isOptional","name","blockStatement","consequent","alternate","generate","generateDescribe","condition","replace","generateTestCases","forEach","branch","helpText","itName","callExpresion","expression","argument","callee","object","property","getDescribe","test","getParamNameByNode","paramNode","params","properties","innerParamNode","key","paramName","hasReturnStatement","getModules","visitor","ExportNamedDeclaration","declaration","moduleDeclarationNode","declarationType","async","declarations","variableNameNode","declaredVariableNode","init","ExportDefaultDeclaration","tempModuleName","relatedNode","identifierName","allRelatedNodes","container","Array","isArray","findRelatedNodeByPath","getNodes","IfStatement","enter","logicalBranchesGenerator","ConditionalExpression","SwitchStatement","TryStatement","uniTestCase","handler","CallExpression","ReturnStatement","buildTestFile","sourceCode","transformSync","presets","babelPresetTypescript","plugins","filename","selectedModule","find","codeToTransform","MODULE_NAME","TEST_CASES","TEMPLATE","prettier","format","singleQuote","tabWidth","parser","prettierBabel","prettierTypescript","Header","Layout","Footer","Content","placeholder","Form","useForm","form","useState","setCode","generatedCode","setGeneratedCode","className","Title","level","onFinish","document","getElementById","value","finalCode","testFileGenerator","trim","size","align","onValueChange","_code","highlight","languages","js","padding","readOnly","direction","Item","label","required","htmlType","Text","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b266eba2.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 264;","import { transformSync, Node, NodePath } from '@babel/core';\r\nimport {\r\n  ConditionalExpression,\r\n  ExportDefaultDeclaration,\r\n  ExportNamedDeclaration,\r\n  // Identifier,\r\n  BlockStatement,\r\n  IfStatement,\r\n  // Statement,\r\n  TryStatement,\r\n  CallExpression,\r\n  ReturnStatement,\r\n  SwitchStatement\r\n} from \"@babel/types\";\r\n// @ts-ignore\r\nimport babelPresetTypescript from '@babel/preset-typescript';\r\nimport generate from '@babel/generator';\r\nimport prettier from 'prettier';\r\nimport prettierBabel from 'prettier/parser-babel';\r\nimport prettierTypescript from 'prettier/parser-typescript';\r\n\r\nconst LINE_BREAK = '\\n';\r\nconst LINE_BREAK_DOUBLE = '\\n\\n';\r\n\r\nconst TEMPLATE = ({\r\n  MODULE_NAME,\r\n  TEST_CASES\r\n}: {\r\n  MODULE_NAME: string;\r\n  TEST_CASES: string;\r\n}) => {return `\r\n  /*\r\n   * File generated by https://fsantecchia.github.io\r\n   */\r\n\r\n  import ${MODULE_NAME} from '../${MODULE_NAME}'\r\n\r\n  const generateData = async () => {};\r\n\r\n  beforeEach(jest.clearAllMocks);\r\n\r\n  ${TEST_CASES}\r\n`};\r\n\r\nclass Describe {\r\n  constructor(description: string) {\r\n    this._description = description;\r\n  }\r\n\r\n  private _description: string;\r\n  private _describes: Describe[] = [];\r\n  private _testCases: It[] = [];\r\n\r\n  addDiscribe = (discribe: Describe) => {\r\n    this._describes.push(discribe);\r\n  }\r\n\r\n  addTestCase = (testCase: It) => {\r\n    this._testCases.push(testCase);\r\n  }\r\n\r\n  getTestCasesLength = () => {\r\n    return this._testCases.length;\r\n  }\r\n\r\n  finish = (): string => {\r\n    if (this._describes.length === 0 && this._testCases.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    return `describe('${this._description}', () => {\r\n      ${this._testCases.map((it) => it.finish()).join(LINE_BREAK_DOUBLE)}\r\n\r\n      ${this._describes.map((describe) => describe.finish()).join(LINE_BREAK_DOUBLE)}\r\n    })`\r\n  }\r\n}\r\n\r\nclass It {\r\n  constructor(description: string) {\r\n    this._description = description;\r\n  }\r\n\r\n  private _description: string;\r\n  private _lines: string[] = []\r\n  private _calledFunctionNames: string[] = []\r\n  private _comment: string = '';\r\n  private _hasReturnStatement: boolean = false;\r\n\r\n  addLine = (line: string) => {\r\n    this._lines.push(line);\r\n  }\r\n\r\n  addEmptyLine = () => {\r\n    this._lines.push(LINE_BREAK);\r\n  }\r\n\r\n  addComment = (comment: string) => {\r\n    this._comment = `/* ${comment} */ ${LINE_BREAK}`;\r\n  }\r\n\r\n  addReturnStatement = () => {\r\n    this._hasReturnStatement = true;\r\n  }\r\n\r\n  addCalledFunctionName = (functionName: string) => {\r\n    this._calledFunctionNames.push(functionName);\r\n  }\r\n\r\n  addExpectsForReturnStatement = () => {\r\n    if (this._hasReturnStatement) {\r\n      this._lines.push(`expect(result).toEqual(/* COMPLETE */)`);\r\n    }\r\n  }\r\n\r\n  addExpectsForCallExpressions = () => {\r\n    for (const functionName of this._calledFunctionNames) {\r\n      this._lines.push(`expect(${functionName}).toHaveBeenCalledTimes(1)`);\r\n      this._lines.push(`expect(${functionName}).toHaveBeenCalledWith(/* COMPLETE */)`);\r\n      this._lines.push(LINE_BREAK);\r\n    }\r\n  }\r\n\r\n  generateStructure = () => {\r\n    this._lines.push(`const mockData = await generateData();`);\r\n    this._lines.push(LINE_BREAK);\r\n    this._lines.push(getParamsAssigment());\r\n    this._lines.push(getFunctionCall(this._hasReturnStatement));\r\n    this._lines.push(LINE_BREAK);\r\n    this.addExpectsForReturnStatement();\r\n    this._lines.push(LINE_BREAK);\r\n    this.addExpectsForCallExpressions();\r\n    //this._lines.push('/* add expect() here */');\r\n  }\r\n\r\n  generateErrorStructure = () => {\r\n    this._lines.push(`expect.assertions(1);`);\r\n    this._lines.push(LINE_BREAK);\r\n    this._lines.push(`const mockData = await generateData();`);\r\n    this._lines.push(LINE_BREAK);\r\n    this._lines.push(`try {`);\r\n    this._lines.push(LINE_BREAK);\r\n    this._lines.push(getParamsAssigment());\r\n    this._lines.push(getFunctionCall(false));\r\n    this._lines.push(`} catch(error) {`);\r\n    this._lines.push(LINE_BREAK);\r\n    this.addExpectsForCallExpressions();\r\n    this._lines.push(`expect(error).toEqual(/* COMPLETE */)`);\r\n    //this._lines.push('/* add expect() here */');\r\n    this._lines.push(LINE_BREAK);\r\n    this._lines.push(`}`);\r\n  }\r\n\r\n  finish = () => {\r\n    return `${this._comment}it('${this._description}', ${APP.isAsync || true ? 'async' : ''} () => {\r\n      ${this._lines.join(LINE_BREAK)}\r\n    })`\r\n  }\r\n}\r\n\r\nclass App {\r\n  isAsync = true;\r\n  modules: { declarationType: string;\r\n    name: string;\r\n    node: Node\r\n    type: string;\r\n    params: any[];\r\n    isAsync: boolean;\r\n  }[] = [];\r\n  selectedModuleName = '';\r\n  selectedModuleParams: Node[] = [];\r\n  //@ts-ignore\r\n  testSuite: Describe; // main Describe\r\n  branches: Describe[] = [];\r\n  tryCatchDescribe: Describe = new Describe(`error handling`);\r\n  mainIt = new It('should work as expected');\r\n  mainReturnStatement: NodePath<ReturnStatement> | null = null;\r\n}\r\nlet APP = new App();\r\n\r\n// returs true when the block statement has at least 1 'ThrowStatement'\r\nconst doesThrowError = (node: BlockStatement | null | undefined): boolean => {\r\n  return Boolean(node && node.body.some((childNode) => childNode.type === 'ThrowStatement'));\r\n}\r\n\r\n// returs true when the path is part of the main logical branch\r\nconst isInMainBranch = (path: NodePath): boolean => {\r\n  if (path.parentPath === null) {\r\n    return true;\r\n  }\r\n\r\n  if (path.parentPath.type === 'IfStatement' || path.parentPath.type === 'ConditionalExpression' || path.parentPath.type === 'CatchClause' || path.parentPath.type === 'SwitchStatement') {\r\n    return false;\r\n  }\r\n\r\n  return isInMainBranch(path.parentPath);\r\n}\r\n\r\n// returs true when the path is part of a VariableDeclarator\r\nconst isInVariableDeclarator = (path: NodePath): boolean => {\r\n  if (path.parentPath === null) {\r\n    return false;\r\n  }\r\n\r\n  if (path.parentPath.type === 'VariableDeclarator' || path.parentPath.type === 'AssignmentExpression' || path.parentPath.type === 'ReturnStatement') {\r\n    return true;\r\n  }\r\n\r\n  return isInVariableDeclarator(path.parentPath);\r\n}\r\n\r\n// returs true when the path is part of a VariableDeclarator\r\n/* const isBlockStatementChildren = (path: NodePath): boolean => {\r\n  if (path.parentPath === null) {\r\n    return false;\r\n  }\r\n\r\n  if (path.parentPath.type === 'BlockStatement') {\r\n    return true;\r\n  }\r\n\r\n  if (path.parentPath.type === 'ExpressionStatement' && path.parentPath.parentPath && path.parentPath.parentPath.type === 'BlockStatement') {\r\n    return true;\r\n  }\r\n\r\n  if (path.parentPath.type === 'AwaitExpression' && path.parentPath.parentPath && path.parentPath.parentPath.type === 'ExpressionStatement' && path.parentPath.parentPath.parentPath && path.parentPath.parentPath.parentPath.type === 'BlockStatement') {\r\n    return true;\r\n  }\r\n\r\n  return false\r\n} */\r\n\r\n// capitalize string\r\nconst capitalize = (s: string): string => {\r\n  if (typeof s !== 'string') return ''\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\nclass LogicalBranchesGenerator {\r\n  constructor(statementNode: IfStatement | ConditionalExpression) {\r\n    this._statementNode = statementNode;\r\n    this._testNode = statementNode.test;\r\n    this.generateBranchesByTestNode(this._testNode, true);\r\n    this.generateDescribe()\r\n    this.generateTestCases();\r\n  }\r\n\r\n  private _logicalBranches: { name: string; blockStatement: BlockStatement | null; isOptional: boolean; }[] = [];\r\n  private _statementNode: IfStatement | ConditionalExpression;\r\n  private _testNode: Node;\r\n  //@ts-ignore\r\n  private _describe: Describe;\r\n\r\n  // testNode => path.node.test\r\n  private generateBranchesByTestNode = (testNode: Node, isMainNode: boolean) => {\r\n    if (testNode.type === 'LogicalExpression') {\r\n      /*if (isMainNode) {\r\n        this._logicalBranches.push({\r\n          isOptional: false,\r\n          name: '`the condition returns true`'\r\n        })\r\n\r\n        if (this._hasAlternate) {\r\n          this._logicalBranches.push({\r\n            isOptional: false,\r\n            name: '`the condition returns false`'\r\n          })\r\n        }\r\n      }*/\r\n\r\n      this.generateBranchesByTestNode(testNode.left, false);\r\n      this.generateBranchesByTestNode(testNode.right, false);\r\n    } else {\r\n      if (isMainNode) {\r\n        this._logicalBranches.push({\r\n          isOptional: false,\r\n          name: 'the condition returns `true`',\r\n          blockStatement: this._statementNode.consequent.type === 'BlockStatement' ? this._statementNode.consequent : null,\r\n        })\r\n\r\n        if (this._statementNode.alternate) {\r\n          this._logicalBranches.push({\r\n            isOptional: false,\r\n            name: 'the condition returns `false`',\r\n            blockStatement: this._statementNode.alternate.type === 'BlockStatement' ? this._statementNode.alternate : null,\r\n          })\r\n        }\r\n\r\n      } else {\r\n        this._logicalBranches.push({\r\n          isOptional: false, //true,\r\n          name: '`' + generate(testNode).code + '` returns true',\r\n          blockStatement: this._statementNode.consequent.type === 'BlockStatement' ? this._statementNode.consequent : null,\r\n        })\r\n\r\n        if (this._statementNode.alternate) {\r\n          this._logicalBranches.push({\r\n            isOptional: false, //true,\r\n            name: '`' + generate(testNode).code + '` returns false',\r\n            blockStatement: this._statementNode.alternate.type === 'BlockStatement' ? this._statementNode.alternate : null,\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private generateDescribe = () => {\r\n    const condition = '`if(' + generate(this._testNode).code.replace(/'/g, '\"').replace(/\\n/g, ' ')+ ')`';\r\n    this._describe = new Describe(`branches generated by ${condition}`);\r\n  }\r\n\r\n  private generateTestCases = () => {\r\n    this._logicalBranches.forEach((branch) => {\r\n      const helpText = doesThrowError(branch.blockStatement) ? 'throw error' : 'work';\r\n      const itName = `should ${helpText} when ${branch.name.replace(/'/g, '\"').replace(/\\n/g, ' ')}`;\r\n\r\n      const it = new It(itName);\r\n\r\n      if (branch.isOptional) {\r\n        it.addComment('optional test case');\r\n      }\r\n\r\n      branch.blockStatement?.body.forEach((node) => {\r\n        if (node.type === 'ReturnStatement') {\r\n          it.addReturnStatement();\r\n        }\r\n\r\n        let callExpresion: CallExpression | null = null;\r\n\r\n        if (node.type === 'ExpressionStatement' && node.expression.type === 'CallExpression') {\r\n          callExpresion = node.expression;\r\n        } else if (node.type === 'ExpressionStatement' && node.expression.type === 'AwaitExpression' && node.expression.argument.type === 'CallExpression') {\r\n          callExpresion = node.expression.argument;\r\n        }\r\n\r\n        if (callExpresion) {\r\n          const { callee } = callExpresion;\r\n          // If callee is a variable/function\r\n          if (callee.type === 'Identifier') {\r\n            const functionName = callee.name + 'Spy';\r\n            it.addCalledFunctionName(functionName);\r\n\r\n          // if calle is a property of an object\r\n          } else if (callee.type === 'MemberExpression') {\r\n            if (callee.object.type === 'Identifier' && callee.property.type === 'Identifier') {\r\n              const functionName = `${callee.object.name}${capitalize(callee.property.name)}Spy`;\r\n              // const functionName = callee.property.name || 'ERROR';\r\n              it.addCalledFunctionName(functionName);\r\n            }\r\n          }\r\n        }\r\n      })\r\n\r\n      if (doesThrowError(branch.blockStatement)) {\r\n        it.generateErrorStructure();\r\n      } else {\r\n        // console.log(branch.blockStatement);\r\n\r\n        it.generateStructure();\r\n      }\r\n\r\n\r\n      this._describe.addTestCase(it)\r\n    })\r\n  }\r\n\r\n  getDescribe = () => {\r\n    return this._describe;\r\n  }\r\n}\r\n\r\n/* returns the param's name */\r\nconst getParamNameByNode = (paramNode: Node): string => {\r\n  if (paramNode.type === 'Identifier') {\r\n    return paramNode.name;\r\n\r\n  } else if (paramNode.type === 'AssignmentPattern') {\r\n    return getParamNameByNode(paramNode.left);\r\n\r\n    // Object as param\r\n  } else if (paramNode.type === 'ObjectPattern') {\r\n    const params: string[] = [];\r\n    paramNode.properties.forEach((innerParamNode) => {\r\n      if (innerParamNode.type === 'ObjectProperty') {\r\n        params.push(getParamNameByNode(innerParamNode.key))\r\n      }\r\n    });\r\n    return `{ ${params.join(', ')} }`;\r\n  }\r\n\r\n  return '';\r\n}\r\n\r\n/* returns param1, param2, param3 */\r\nconst getParamsForFunction = (): string => {\r\n  return APP.selectedModuleParams.map((paramNode) => getParamNameByNode(paramNode)).join(', ');\r\n}\r\n\r\n/* returns const param1 = 'REPLACE'; const param2 = 'REPLACE'; */\r\nconst getParamsAssigment = (): string => {\r\n  const params: string[] = [];\r\n\r\n  APP.selectedModuleParams.forEach((paramNode) => {\r\n    // Object as params\r\n    if (paramNode.type === 'ObjectPattern') {\r\n      paramNode.properties.forEach((innerParamNode) => {\r\n        if (innerParamNode.type === 'ObjectProperty') {\r\n          params.push(getParamNameByNode(innerParamNode.key))\r\n        }\r\n      });\r\n\r\n    } else {\r\n      params.push(getParamNameByNode(paramNode))\r\n    }\r\n  })\r\n\r\n  const formattedAssigments = params.map((paramName) => {\r\n    return `const ${paramName} = 'REPLACE'; /* REPLACE */`\r\n  })\r\n\r\n  return formattedAssigments.join(LINE_BREAK)\r\n}\r\n\r\n/* returns `const result = function(param1, param2);` */\r\nconst getFunctionCall = (hasReturnStatement: boolean): string => {\r\n  return `${hasReturnStatement ? 'const result =' : ''} ${APP.isAsync ? 'await' : ''} ${APP.selectedModuleName}(${getParamsForFunction()});`;\r\n}\r\n\r\n/* returns Node related to `export default IDENTIFIER` */\r\nconst findRelatedNodeByPath = (path: NodePath<ExportDefaultDeclaration>, identifierName: string): Node | null => {\r\n  const allRelatedNodes = path.container as Node | Node[];\r\n  let relatedNode = null;\r\n\r\n  if (Array.isArray(allRelatedNodes)) {\r\n    allRelatedNodes.forEach((node) => {\r\n      // function\r\n      if (node.type === 'FunctionDeclaration' && node.id && node.id.name === identifierName) {\r\n        relatedNode = node;\r\n      }\r\n\r\n      // arrow function\r\n      if (node.type === 'VariableDeclaration' && node.declarations) {\r\n        node.declarations.forEach((declaration) => {\r\n          const variableNameNode = declaration.id;\r\n          const declaredVariableNode = declaration.init;\r\n\r\n          if (\r\n            declaredVariableNode?.type === 'ArrowFunctionExpression' &&\r\n            variableNameNode.type === 'Identifier' &&\r\n            variableNameNode?.name === identifierName\r\n          ) {\r\n            relatedNode = declaredVariableNode;\r\n          }\r\n\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  return relatedNode;\r\n};\r\n\r\nconst getModules = () => {\r\n  return {\r\n    visitor: {\r\n      ExportNamedDeclaration(path: NodePath<ExportNamedDeclaration>) {\r\n        if (!path?.node?.declaration) {\r\n          return ;\r\n        }\r\n\r\n        const moduleDeclarationNode = path.node.declaration;\r\n\r\n        if (moduleDeclarationNode.type === 'FunctionDeclaration' && moduleDeclarationNode.id) {\r\n          APP.modules.push({\r\n            declarationType: moduleDeclarationNode.id.type,\r\n            isAsync: moduleDeclarationNode.async || false,\r\n            name: moduleDeclarationNode.id.name,\r\n            node: moduleDeclarationNode,\r\n            params: moduleDeclarationNode.params,\r\n            type: moduleDeclarationNode.type,\r\n          });\r\n        }\r\n\r\n        if (moduleDeclarationNode.type === 'VariableDeclaration' && moduleDeclarationNode.declarations) {\r\n          moduleDeclarationNode.declarations.forEach((declaration) => {\r\n            const variableNameNode = declaration.id;\r\n            const declaredVariableNode = declaration.init;\r\n\r\n            if (variableNameNode.type === 'Identifier' && declaredVariableNode?.type === 'ArrowFunctionExpression') {\r\n              APP.modules.push({\r\n                declarationType: declaredVariableNode.type,\r\n                isAsync: declaredVariableNode.async || false,\r\n                name: variableNameNode.name,\r\n                node: declaredVariableNode,\r\n                params: declaredVariableNode.params,\r\n                type: path.node.type,\r\n              });\r\n            }\r\n\r\n          });\r\n        }\r\n      },\r\n      ExportDefaultDeclaration(path: NodePath<ExportDefaultDeclaration>) {\r\n        let moduleDeclarationNode: Node = path.node.declaration;\r\n        let tempModuleName = null;\r\n        if (moduleDeclarationNode.type === 'Identifier') {\r\n          tempModuleName = moduleDeclarationNode.name;\r\n          const relatedNode = findRelatedNodeByPath(path, moduleDeclarationNode.name);\r\n\r\n          if (relatedNode) {\r\n            moduleDeclarationNode = relatedNode;\r\n          }\r\n        }\r\n\r\n        if (moduleDeclarationNode.type === 'FunctionDeclaration' && moduleDeclarationNode.id) {\r\n          APP.modules.push({\r\n            declarationType: moduleDeclarationNode.id.type,\r\n            isAsync: moduleDeclarationNode.async || false,\r\n            name: tempModuleName || moduleDeclarationNode?.id?.name || 'NAME NOT FOUND',\r\n            node: moduleDeclarationNode,\r\n            params: moduleDeclarationNode.params,\r\n            type: moduleDeclarationNode.type,\r\n          });\r\n        }\r\n\r\n        if (moduleDeclarationNode.type === 'ArrowFunctionExpression') {\r\n          APP.modules.push({\r\n            declarationType: moduleDeclarationNode.type,\r\n            isAsync: moduleDeclarationNode.async || false,\r\n            name: tempModuleName || 'unknown',\r\n            node: moduleDeclarationNode,\r\n            params: moduleDeclarationNode.params,\r\n            type: path.node.type,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst getNodes = () => {\r\n  return {\r\n    visitor: {\r\n      IfStatement: {\r\n        enter: (path: NodePath<IfStatement>) => {\r\n          //console.log(path)\r\n          const logicalBranchesGenerator = new LogicalBranchesGenerator(path.node);\r\n          APP.branches.push(logicalBranchesGenerator.getDescribe());\r\n        },\r\n      },\r\n      ConditionalExpression: {\r\n        enter: (path: NodePath<ConditionalExpression>) => {\r\n          //console.log(path)\r\n          const logicalBranchesGenerator = new LogicalBranchesGenerator(path.node);\r\n          APP.branches.push(logicalBranchesGenerator.getDescribe());\r\n        },\r\n      },\r\n      SwitchStatement: {\r\n        enter: (path: NodePath<SwitchStatement>) => {\r\n          // TODO: work on this\r\n        },\r\n      },\r\n      TryStatement: {\r\n        enter: (path: NodePath<TryStatement>) => {\r\n          // console.log(path);\r\n          const itName = `should execute catch for try number ${APP.tryCatchDescribe.getTestCasesLength() + 1}`;\r\n\r\n          const uniTestCase = new It(itName);\r\n\r\n          if (doesThrowError(path.node.handler?.body)) {\r\n            uniTestCase.generateErrorStructure();\r\n          } else {\r\n            uniTestCase.generateStructure();\r\n          }\r\n\r\n          APP.tryCatchDescribe.addTestCase(uniTestCase);\r\n        },\r\n      },\r\n      CallExpression: {\r\n        enter: (path: NodePath<CallExpression>) => {\r\n          // console.log(path, !isInMainBranch(path), isInVariableDeclarator(path))\r\n\r\n          if (!isInMainBranch(path)) {\r\n            return;\r\n          }\r\n\r\n          if (isInVariableDeclarator(path)) {\r\n            return;\r\n          }\r\n\r\n          //console.log(path);\r\n\r\n          const { callee } = path.node;\r\n\r\n          // If callee is a variable/function\r\n          if (callee.type === 'Identifier') {\r\n            const functionName = callee.name + 'Spy';\r\n            APP.mainIt.addCalledFunctionName(functionName);\r\n\r\n          // if calle is a property of an object\r\n          } else if (callee.type === 'MemberExpression') {\r\n            if (callee.object.type === 'Identifier' && callee.property.type === 'Identifier') {\r\n              const functionName = `${callee.object.name}${capitalize(callee.property.name)}Spy`;\r\n              // const functionName = callee.property.name || 'ERROR';\r\n              APP.mainIt.addCalledFunctionName(functionName);\r\n            }\r\n          }\r\n        }\r\n      },\r\n      ReturnStatement: {\r\n        enter: (path: NodePath<ReturnStatement>) => {\r\n          //console.log(path, isInMainBranch(path))\r\n\r\n          if (!isInMainBranch(path)) {\r\n            return;\r\n          }\r\n\r\n          APP.mainReturnStatement = path;\r\n        },\r\n      },\r\n    }\r\n  };\r\n}\r\n\r\nconst buildTestFile = (sourceCode: string, functionName: string) => {\r\n  APP = new App();\r\n\r\n  // Set APP.moduleForPlugin\r\n  transformSync(sourceCode, {\r\n    presets: [babelPresetTypescript],\r\n    plugins: [getModules],\r\n    filename: './temp.ts'\r\n  });\r\n\r\n  // Set selected module values\r\n  const selectedModule = APP.modules.find(({ name }) => name === functionName);\r\n\r\n  if (!selectedModule) {\r\n    return 'WRONG FUNCTION/MODULE NAME'\r\n  }\r\n\r\n  APP.selectedModuleName = selectedModule.name\r\n  // @ts-ignore\r\n  APP.selectedModuleParams = selectedModule.params || selectedModule.node.declaration.params;\r\n  // @ts-ignore\r\n  APP.isAsync = typeof selectedModule.isAsync === 'boolean' ? selectedModule.isAsync : selectedModule.node.declaration.async;\r\n  // APP.isAsync = true;\r\n\r\n  // Parse AST to string\r\n  const codeToTransform = generate(selectedModule.node).code\r\n\r\n  transformSync(codeToTransform, {\r\n    presets: [babelPresetTypescript],\r\n    plugins: [getNodes],\r\n    filename: './temp.ts'\r\n  });\r\n\r\n  // Generate main describe\r\n  APP.testSuite = new Describe(`module ${APP.selectedModuleName}`)\r\n\r\n  // Generate it() for main branch\r\n  if (APP.mainReturnStatement) {\r\n    APP.mainIt.addReturnStatement();\r\n  }\r\n  APP.mainIt.generateStructure();\r\n  APP.testSuite.addTestCase(APP.mainIt);\r\n\r\n  // Add describes\r\n  APP.branches.map(APP.testSuite.addDiscribe);\r\n  APP.testSuite.addDiscribe(APP.tryCatchDescribe);\r\n\r\n  const code = TEMPLATE({\r\n    MODULE_NAME: APP.selectedModuleName,\r\n    TEST_CASES: APP.testSuite.finish(),\r\n   })\r\n\r\n  const finalCode = prettier.format(code, { singleQuote: true, tabWidth: 2, parser: 'babel', plugins: [prettierBabel, prettierTypescript] })\r\n\r\n  return finalCode;\r\n}\r\n\r\n\r\nexport default buildTestFile;","import React, { useState } from 'react';\r\nimport { Button, Card, Divider, Form, Layout, Image, Input, Space, Typography } from 'antd';\r\n\r\nimport Editor from \"react-simple-code-editor\";\r\n// @ts-ignore\r\nimport { highlight, languages } from \"prismjs/components/prism-core\";\r\nimport \"prismjs/components/prism-clike\";\r\nimport \"prismjs/components/prism-javascript\";\r\n\r\n//import exampleImage from './example.gif';\r\nimport testFileGenerator from './testFileGenerator';\r\nimport './App.css';\r\n\r\nconst { Header, Footer, Content } = Layout;\r\n\r\nconst placeholder = `Write your code here\r\n1 - Export the function/module that you would like to test\r\n2 - Fill the input below\r\n3 - Press \"Generate file\" button\r\n\r\nExample 1:\r\nexport function isValid(param1: string) {\r\n  let isInvalid = false;\r\n  if (!param1) {\r\n    isInvalid = true;\r\n  }\r\n  return isInvalid;\r\n}\r\n\r\nExample 2:\r\nexport const isValid = (param1: string) => {\r\n  let isInvalid = false;\r\n  if (!param1) {\r\n    isInvalid = true;\r\n  }\r\n  return isInvalid;\r\n}\r\n`\r\n\r\nfunction App() {\r\n  const [form] = Form.useForm();\r\n  const [code, setCode] = useState('');\r\n  const [generatedCode, setGeneratedCode] = useState(\r\n    `The test file will be added here`\r\n  );\r\n\r\n  const generateUnitTestCases = () => {\r\n    const functionName = (document.getElementById('functionName') as HTMLInputElement).value;\r\n\r\n    let finalCode = '';\r\n    if (code && functionName) {\r\n      finalCode = testFileGenerator(code, functionName.trim());\r\n    } else {\r\n      finalCode = 'MISSING PARAMETERS'\r\n    }\r\n\r\n    setGeneratedCode(finalCode);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App background-color\">\r\n      <Layout>\r\n\r\n        <Header className=\"background-color\">\r\n          <Typography.Title level={1}>\r\n            Generate unit tests for your code!\r\n          </Typography.Title>\r\n        </Header>\r\n\r\n        <Content className=\"background-color\">\r\n          <Form form={form} onFinish={generateUnitTestCases}>\r\n\r\n            <div>\r\n              <Space size=\"middle\" align=\"center\">\r\n                <div className=\"code-editor-container\">\r\n                  <Editor\r\n                    value={code}\r\n                    onValueChange={(_code) => setCode(_code)}\r\n                    highlight={(_code) => highlight(_code, languages.js)}\r\n                    padding={10}\r\n                    className=\"code-editor\"\r\n                    placeholder={placeholder}\r\n                  />\r\n                </div>\r\n                <div className=\"code-editor-container\">\r\n                  <Editor\r\n                    value={generatedCode}\r\n                    onValueChange={(_code) => setGeneratedCode(_code)}\r\n                    highlight={(_code) => highlight(_code, languages.js)}\r\n                    padding={10}\r\n                    className=\"code-editor\"\r\n                    placeholder={placeholder}\r\n                    readOnly\r\n                  />\r\n                </div>\r\n              </Space>\r\n            </div>\r\n\r\n            <br />\r\n\r\n            <Space>\r\n              <Card className=\"background-color\">\r\n                <Space size=\"middle\" align=\"center\" direction=\"vertical\">\r\n                  <Form.Item\r\n                    label=\"Module to test\"\r\n                    name=\"functionName\"\r\n                  /*rules={[{ required: true, message: 'Please input your username!' }]}*/\r\n                  >\r\n                    <Input id=\"functionName\" placeholder=\"Example: isValid\" required />\r\n                  </Form.Item>\r\n                  <Button type=\"primary\" htmlType=\"submit\">Generate file</Button>\r\n                </Space>\r\n              </Card>\r\n            </Space>\r\n\r\n          </Form>\r\n\r\n          <Divider />\r\n\r\n          {/*<Space size=\"middle\" align=\"center\" direction=\"vertical\">\r\n            <Typography.Title level={2}>\r\n              How to use\r\n            </Typography.Title>\r\n\r\n            <Image src={exampleImage} width={1280} height={720} />\r\n          </Space>*/}\r\n\r\n          <Space size=\"middle\" align=\"center\" direction=\"vertical\">\r\n            <Typography.Title level={2}>\r\n              Command to run test locally\r\n            </Typography.Title>\r\n            <Typography.Text>\r\n              Replace 'FILE_PATH' and 'TEST_FILE_PATH'\r\n            </Typography.Text>\r\n            <Typography.Text>\r\n              node ./node_modules/.bin/jest --collectCoverage --coverageReporters=text --collectCoverageFrom=FILE_PATH TEST_FILE_PATH\r\n            </Typography.Text>\r\n          </Space>\r\n\r\n        </Content>\r\n\r\n        <Footer className=\"background-color\">by Fabra</Footer>\r\n      </Layout>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}