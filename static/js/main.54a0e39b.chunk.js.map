{"version":3,"sources":["../node_modules/prettier sync","example.gif","testFileGenerator.ts","App.tsx","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","LINE_BREAK","App","isAsync","modules","selectedModuleName","selectedModuleParams","testSuite","tryCatchCases","APP","LogicalBranchesGenerator","testNode","_logicalBranches","_testNode","_describe","generateBranchesByTestNode","isMainNode","type","push","isOptional","name","left","right","generate","generateDescribe","condition","replace","Describe","generateTestCases","forEach","branch","itName","it","It","addComment","generateStructure","addTestCase","getDescribe","this","description","_description","_describes","_testCases","addDiscribe","discribe","testCase","finish","map","join","describe","_lines","_comment","addLine","line","addEmptyLine","comment","getParamsAssigment","getFunctionCall","getParamNameByNode","paramNode","params","properties","innerParamNode","key","paramName","getModules","visitor","ExportNamedDeclaration","path","node","declaration","declarationType","declarations","init","async","specifiers","length","specifier","exported","ExportDefaultDeclaration","getNodes","IfStatement","enter","logicalBranchesGenerator","test","ConditionalExpression","TryStatement","uniTestCase","buildTestFile","sourceCode","functionName","transformSync","presets","babelPresetTypescript","plugins","filename","selectedModule","find","firstIt","codeToTransform","MODULE_NAME","TEST_CASES","TEMPLATE","prettier","format","singleQuote","tabWidth","parser","prettierBabel","prettierTypescript","Header","Layout","Footer","Content","Form","useForm","form","className","Title","level","onFinish","document","getElementById","value","finalCode","testFileGenerator","trim","setFieldsValue","generated","size","align","TextArea","rows","cols","placeholder","required","showCount","Item","readOnly","direction","label","htmlType","src","exampleImage","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.54a0e39b.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 267;","export default __webpack_public_path__ + \"static/media/example.814719f1.gif\";","import { transformSync, Node, NodePath } from '@babel/core';\r\nimport { \r\n  ConditionalExpression,\r\n  ExportDefaultDeclaration, \r\n  ExportNamedDeclaration, \r\n  IfStatement,\r\n} from \"@babel/types\";\r\n// @ts-ignore\r\nimport babelPresetTypescript from '@babel/preset-typescript';\r\nimport generate from '@babel/generator';\r\nimport prettier from 'prettier';\r\nimport prettierBabel from 'prettier/parser-babel';\r\nimport prettierTypescript from 'prettier/parser-typescript';\r\n\r\nconst LINE_BREAK = '\\n';\r\nconst LINE_BREAK_DOUBLE = '\\n\\n';\r\n\r\nconst TEMPLATE = ({\r\n  MODULE_NAME,\r\n  TEST_CASES\r\n}: {\r\n  MODULE_NAME: string;\r\n  TEST_CASES: string;\r\n}) => {return `\r\n  /* \r\n   * File generated by https://fsantecchia.github.io \r\n   */\r\n\r\n  import ${MODULE_NAME} from '../${MODULE_NAME}'\r\n\r\n  ${TEST_CASES}\r\n`};\r\n\r\nclass App {\r\n  isAsync = true;\r\n  modules: { declarationType: string;\r\n    name: string;\r\n    node: Node\r\n    type: string;\r\n    params?: any[];\r\n    isAsync?: boolean;\r\n  }[] = [];\r\n  selectedModuleName = '';\r\n  selectedModuleParams: Node[] = [];\r\n  //@ts-ignore\r\n  testSuite: Describe; // main Describe\r\n  tryCatchCases: It[] = [];\r\n}\r\nlet APP = new App();\r\n\r\nclass LogicalBranchesGenerator {\r\n  constructor(testNode: Node) {\r\n    this._testNode = testNode;\r\n    this.generateBranchesByTestNode(this._testNode, true);\r\n    this.generateDescribe()\r\n    this.generateTestCases();\r\n  } \r\n\r\n  private _logicalBranches: { name: string; isOptional: boolean; }[] = [];\r\n  private _testNode: Node;\r\n  //@ts-ignore\r\n  private _describe: Describe;\r\n\r\n  // testNode => path.node.test\r\n  private generateBranchesByTestNode = (testNode: Node, isMainNode: boolean) => {\r\n    if (testNode.type === 'LogicalExpression') {\r\n      if (isMainNode) {\r\n        this._logicalBranches.push({\r\n          isOptional: false,\r\n          name: '`the condition returns true`'\r\n        })\r\n        this._logicalBranches.push({\r\n          isOptional: false,\r\n          name: '`the condition returns false`'\r\n        })\r\n      }\r\n\r\n      this.generateBranchesByTestNode(testNode.left, false);\r\n      this.generateBranchesByTestNode(testNode.right, false);\r\n    } else {\r\n      if (isMainNode) {\r\n        this._logicalBranches.push({\r\n          isOptional: false,\r\n          name: '`the condition returns true`'\r\n        })\r\n        this._logicalBranches.push({\r\n          isOptional: false,\r\n          name: '`the condition returns false`'\r\n        })\r\n      } else {\r\n        this._logicalBranches.push({\r\n          isOptional: true,\r\n          name: '`' + generate(testNode).code + ' returns true' + '`'\r\n        })\r\n        this._logicalBranches.push({\r\n          isOptional: true,\r\n          name: '`' + generate(testNode).code + ' returns false' + '`'\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  private generateDescribe = () => {\r\n    const condition = '`if(' + generate(this._testNode).code.replace(/'/g, '`').replace(/\\n/g, ' ')+ ')`';\r\n    this._describe = new Describe(`Branches generated by ${condition}`);\r\n  }\r\n\r\n  private generateTestCases = () => {\r\n    this._logicalBranches.forEach((branch) => {\r\n      const itName = `should work when ${branch.name.replace(/'/g, '`').replace(/\\n/g, ' ')}`;\r\n\r\n      const it = new It(itName);\r\n\r\n      if (branch.isOptional) {\r\n        it.addComment('optional test case');\r\n      }\r\n\r\n      it.generateStructure();\r\n\r\n      this._describe.addTestCase(it)\r\n    })\r\n  }\r\n\r\n  getDescribe = () => {\r\n    return this._describe;\r\n  }\r\n}\r\n\r\nclass Describe {\r\n  constructor(description: string) {\r\n    this._description = description;\r\n  }\r\n\r\n  private _description: string;\r\n  private _describes: Describe[] = [];\r\n  private _testCases: It[] = [];\r\n\r\n  addDiscribe = (discribe: Describe) => {\r\n    this._describes.push(discribe);\r\n  }\r\n\r\n  addTestCase = (testCase: It) => {\r\n    this._testCases.push(testCase);\r\n  }\r\n\r\n  finish = (): string => {\r\n    return `describe('${this._description}', () => {\r\n      beforeEach(async () => {});\r\n\r\n      ${this._testCases.map((it) => it.finish()).join(LINE_BREAK_DOUBLE)}\r\n\r\n      ${this._describes.map((describe) => describe.finish()).join(LINE_BREAK_DOUBLE)}\r\n    })`\r\n  }\r\n}\r\n\r\nclass It {\r\n  constructor(description: string) {\r\n    this._description = description;\r\n  }\r\n\r\n  private _description: string;\r\n  private _lines: string[] = []\r\n  private _comment: string = '';\r\n\r\n  addLine = (line: string) => {\r\n    this._lines.push(line);\r\n  }\r\n\r\n  addEmptyLine = () => {\r\n    this._lines.push(LINE_BREAK);\r\n  }\r\n\r\n  addComment = (comment: string) => {\r\n    this._comment = `/* ${comment} */ ${LINE_BREAK}`;\r\n  }\r\n\r\n  generateStructure = () => {\r\n    this._lines.push(getParamsAssigment());\r\n    this._lines.push(LINE_BREAK);\r\n    this._lines.push(getFunctionCall());\r\n    this._lines.push(LINE_BREAK);\r\n    this._lines.push('/* add expect() here */');\r\n  }\r\n\r\n  finish = () => {\r\n    return `${this._comment}it('${this._description}', ${APP.isAsync ? 'async' : ''} () => {\r\n      ${this._lines.join(LINE_BREAK)}\r\n    })`\r\n  }\r\n}\r\n\r\n/* returns the param's name */\r\nconst getParamNameByNode = (paramNode: Node): string => {\r\n  if (paramNode.type === 'Identifier') {\r\n    return paramNode.name;\r\n\r\n  } else if (paramNode.type === 'AssignmentPattern') {\r\n    return getParamNameByNode(paramNode.left);\r\n\r\n    // Object as param\r\n  } else if (paramNode.type === 'ObjectPattern') {\r\n    const params: string[] = [];\r\n    paramNode.properties.forEach((innerParamNode) => {\r\n      if (innerParamNode.type === 'ObjectProperty') {\r\n        params.push(getParamNameByNode(innerParamNode.key))\r\n      }\r\n    });\r\n    return `{ ${params.join(', ')} }`;\r\n  }\r\n  \r\n  return '';\r\n}\r\n\r\n/* returns param1, param2, param3 */\r\nconst getParamsForFunction = (): string => {\r\n  return APP.selectedModuleParams.map((paramNode) => getParamNameByNode(paramNode)).join(', ');\r\n}\r\n\r\n/* returns const param1 = 'REPLACE'; const param2 = 'REPLACE'; */\r\nconst getParamsAssigment = (): string => {\r\n  const params: string[] = [];\r\n\r\n  APP.selectedModuleParams.forEach((paramNode) => {\r\n    // Object as params\r\n    if (paramNode.type === 'ObjectPattern') {\r\n      paramNode.properties.forEach((innerParamNode) => {\r\n        if (innerParamNode.type === 'ObjectProperty') {\r\n          params.push(getParamNameByNode(innerParamNode.key))\r\n        }\r\n      });\r\n  \r\n    } else {\r\n      params.push(getParamNameByNode(paramNode))\r\n    }\r\n  })\r\n\r\n  const formattedAssigments = params.map((paramName) => {\r\n    return `const ${paramName} = 'REPLACE';`\r\n  })\r\n\r\n  return formattedAssigments.join(LINE_BREAK)\r\n}\r\n\r\n/* returns const result = function(param1, param2); */\r\nconst getFunctionCall = (): string => {\r\n  return `const result = ${APP.isAsync ? 'await' : ''} ${APP.selectedModuleName}(${getParamsForFunction()});`;\r\n}\r\n\r\nconst getModules = () => {\r\n  return {\r\n    visitor: {\r\n      ExportNamedDeclaration(path: NodePath<ExportNamedDeclaration>) {\r\n        // @ts-ignore\r\n        if (path.node.declaration.id) {\r\n          APP.modules.push({\r\n            // @ts-ignore\r\n            declarationType: path.node.declaration.id.type,\r\n            // @ts-ignore\r\n            name: path.node.declaration.id.name,\r\n            node: path.node,\r\n            type: path.node.type,\r\n          });\r\n        }\r\n        // @ts-ignore\r\n        if (path.node.declaration.declarations) {\r\n          // VariableDeclaration\r\n          // @ts-ignore\r\n          path.node.declaration.declarations.forEach((declaration) => {\r\n            APP.modules.push({\r\n              declarationType: declaration.id.type,\r\n              name: declaration.id.name,\r\n              node: declaration.init,\r\n              params: declaration.init.params,\r\n              isAsync: declaration.init.async,\r\n              type: path.node.type,\r\n            });\r\n          });\r\n        }\r\n        if (path.node.specifiers && path.node.specifiers.length >= 1) {\r\n          path.node.specifiers.forEach((specifier) => {\r\n            APP.modules.push({\r\n              declarationType: specifier.exported.type,\r\n              // @ts-ignore\r\n              name: specifier.exported.name,\r\n              node: path.node,\r\n              type: path.node.type,\r\n            });\r\n          });\r\n        }\r\n        /*if (path.node.declaration?.type === 'VariableDeclaration') {\r\n\r\n        }*/\r\n      },\r\n      ExportDefaultDeclaration(path: NodePath<ExportDefaultDeclaration>) {\r\n        if (path.node.declaration.type === 'Identifier') {\r\n          // TODO: FIX\r\n          return;\r\n        }\r\n\r\n        APP.modules.push({\r\n          declarationType: path.node.declaration.type,\r\n          // @ts-ignore\r\n          name: path.node.declaration.id.name,\r\n          node: path.node,\r\n          type: path.node.type,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst getNodes = () => {\r\n  return {\r\n    visitor: {\r\n      IfStatement: {\r\n        enter: (path: NodePath<IfStatement>) => {\r\n          const logicalBranchesGenerator = new LogicalBranchesGenerator(path.node.test);\r\n          APP.testSuite.addDiscribe(logicalBranchesGenerator.getDescribe());\r\n        },\r\n      },\r\n      ConditionalExpression: {\r\n        enter: (path: NodePath<ConditionalExpression>) => {\r\n          const logicalBranchesGenerator = new LogicalBranchesGenerator(path.node.test);\r\n          APP.testSuite.addDiscribe(logicalBranchesGenerator.getDescribe());\r\n        },\r\n      },\r\n      TryStatement: {\r\n        enter: () => {\r\n          const itName = `Error handling - should execute catch for try number ${APP.tryCatchCases.length + 1}`;\r\n\r\n          const uniTestCase = new It(itName);\r\n          uniTestCase.generateStructure();\r\n          APP.tryCatchCases.push(uniTestCase);\r\n        },\r\n      },\r\n    }\r\n  };\r\n}\r\n\r\nconst buildTestFile = (sourceCode: string, functionName: string) => {\r\n  APP = new App();\r\n\r\n  // Set APP.moduleForPlugin\r\n  transformSync(sourceCode, {\r\n    presets: [babelPresetTypescript],\r\n    plugins: [getModules],\r\n    filename: './temp.ts'\r\n  });\r\n\r\n  // Set selected module values\r\n  const selectedModule = APP.modules.find(({ name }) => name === functionName);\r\n\r\n  if (!selectedModule) {\r\n    return 'WRONG FUNCTION NAME'\r\n  }\r\n\r\n  APP.selectedModuleName = selectedModule.name\r\n  // @ts-ignore\r\n  APP.selectedModuleParams = selectedModule.params || selectedModule.node.declaration.params;\r\n  // @ts-ignore\r\n  APP.isAsync = typeof selectedModule.isAsync === 'boolean' ? selectedModule.isAsync : selectedModule.node.declaration.async;\r\n\r\n  // Generate main describe\r\n  APP.testSuite = new Describe(`Module ${APP.selectedModuleName}`)\r\n\r\n  // Generate first it()\r\n  const firstIt = new It('should work as expected')\r\n  firstIt.generateStructure();\r\n  APP.testSuite.addTestCase(firstIt);\r\n\r\n  // Parse AST to string\r\n  const codeToTransform = generate(selectedModule.node).code\r\n\r\n  transformSync(codeToTransform, {\r\n    presets: [babelPresetTypescript],\r\n    plugins: [getNodes],\r\n    filename: './temp.ts'\r\n  });\r\n\r\n  // Add try/catch statements at the end\r\n  APP.tryCatchCases.map(APP.testSuite.addTestCase)\r\n\r\n  const code = TEMPLATE({ \r\n    MODULE_NAME: APP.selectedModuleName,\r\n    TEST_CASES: APP.testSuite.finish(),\r\n   })\r\n\r\n  const finalCode = prettier.format(code, { singleQuote: true, tabWidth: 2, parser: 'babel', plugins: [prettierBabel, prettierTypescript] })\r\n\r\n  return finalCode;\r\n}\r\n\r\n\r\nexport default buildTestFile;","import { Button, Card, Col, Divider, Form, Layout, Image, Input, Row, Space, Typography } from 'antd';\n\nimport exampleImage from './example.gif';\nimport testFileGenerator from './testFileGenerator';\nimport './App.css';\n\nconst { Header, Footer, Content } = Layout;\n\nconst placeholder = `Write your code here\n1 - Export the function/module that you would like to test\n2 - Fill the input below\n3 - Press \"Generate file\" button\n\nExample 1: \nexport function isValid(param1: string) {\n  let isInvalid = false;\n  if (!param1) {\n    isInvalid = true;\n  }\n  return isInvalid;\n}\n\nExample 2: \nexport const isValid = (param1: string) => {\n  let isInvalid = false;\n  if (!param1) {\n    isInvalid = true;\n  }\n  return isInvalid;\n}\n`\n\nfunction App() {\n  const [form] = Form.useForm();\n\n  const generateUnitTestCases = () => {\n    const code = (document.getElementById('code') as HTMLInputElement).value;\n    const functionName = (document.getElementById('functionName') as HTMLInputElement).value;\n\n    let finalCode = '';\n    if (code && functionName) {\n      finalCode = testFileGenerator(code, functionName.trim());\n    } else {\n      finalCode = 'MISSING PARAMETERS'\n    }\n\n    //(document.getElementById('generated') as HTMLInputElement).value = finalCode;\n    form.setFieldsValue({ generated: finalCode });\n  }\n\n  return (\n    <div className=\"App background-color\">\n      <Layout>\n\n        <Header className=\"background-color\">\n          <Typography.Title level={1}>\n            Generate unit tests for your code!\n          </Typography.Title>\n        </Header>\n\n        <Content className=\"background-color\">\n          <Form form={form} onFinish={generateUnitTestCases}>\n\n          <div>\n            <Space size=\"middle\" align=\"center\">\n              <Input.TextArea name=\"code\" id=\"code\" rows={35} cols={100} placeholder={placeholder} required showCount />\n              <Form.Item name=\"generated\">\n                <Input.TextArea id=\"generated\" rows={35} cols={100} value=\"The test file will be added here\" readOnly showCount />\n              </Form.Item>\n            </Space>\n          </div>\n\n            <Space>\n              <Card className=\"background-color\">\n                <Space size=\"middle\" align=\"center\" direction=\"vertical\">\n                  <Form.Item\n                    label=\"Module to test\"\n                    name=\"functionName\"\n                  /*rules={[{ required: true, message: 'Please input your username!' }]}*/\n                  >\n                    <Input id=\"functionName\" placeholder=\"Example: isValid\" required />\n                  </Form.Item>\n                  <Button type=\"primary\" htmlType=\"submit\">Generate file</Button>\n                </Space>\n              </Card>\n            </Space>\n\n          </Form>\n\n          <Divider />\n\n          <Space size=\"middle\" align=\"center\" direction=\"vertical\">\n            <Typography.Title level={2}>\n              How to use\n            </Typography.Title>\n\n            <Image src={exampleImage} width={1280} height={720} />\n          </Space>\n\n        </Content>\n\n        <Footer className=\"background-color\">by Fabra 2021</Footer>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}