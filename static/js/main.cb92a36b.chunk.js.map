{"version":3,"sources":["../node_modules/prettier sync","testFileGenerator.ts","App.tsx","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","LINE_BREAK","App","isAsync","modules","selectedModuleName","selectedModuleParams","testSuite","tryCatchCases","APP","LogicalBranchesGenerator","testNode","_logicalBranches","_testNode","_describe","generateDescribe","condition","generate","replace","Describe","generateBranchesByTestNode","isMainNode","type","push","name","left","right","generateTestCases","forEach","branch","itName","it","It","generateStructure","addTestCase","getDescribe","this","description","_description","_describes","_testCases","addDiscribe","discribe","testCase","finish","map","join","describe","_lines","addLine","line","addEmptyLine","getParamsAssigment","getFunctionCall","getParamNameByNode","paramNode","params","properties","innerParamNode","key","paramName","getModules","visitor","ExportNamedDeclaration","path","node","declaration","declarationType","declarations","init","async","specifiers","length","specifier","exported","ExportDefaultDeclaration","getNodes","IfStatement","enter","logicalBranchesGenerator","test","ConditionalExpression","TryStatement","uniTestCase","buildTestFile","sourceCode","functionName","transformSync","presets","babelPresetTypescript","plugins","filename","selectedModule","find","console","log","firstIt","codeToTransform","MODULE_NAME","TEST_CASES","TEMPLATE","prettier","format","singleQuote","tabWidth","parser","prettierBabel","prettierTypescript","className","rows","cols","placeholder","required","value","readOnly","onClick","event","preventDefault","document","getElementById","finalCode","testFileGenerator","trim","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cb92a36b.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 186;","import { transformSync, Node, NodePath } from '@babel/core';\r\nimport { \r\n  ConditionalExpression,\r\n  ExportDefaultDeclaration, \r\n  ExportNamedDeclaration, \r\n  IfStatement,\r\n} from \"@babel/types\";\r\n// @ts-ignore\r\nimport babelPresetTypescript from '@babel/preset-typescript';\r\nimport generate from '@babel/generator';\r\nimport prettier from 'prettier';\r\nimport prettierBabel from 'prettier/parser-babel';\r\nimport prettierTypescript from 'prettier/parser-typescript';\r\n\r\nconst LINE_BREAK = '\\n';\r\nconst LINE_BREAK_DOUBLE = '\\n\\n';\r\n\r\nconst TEMPLATE = ({\r\n  MODULE_NAME,\r\n  TEST_CASES\r\n}: {\r\n  MODULE_NAME: string;\r\n  TEST_CASES: string;\r\n}) => {return `\r\n  import ${MODULE_NAME} from '../${MODULE_NAME}'\r\n\r\n  ${TEST_CASES}\r\n`};\r\n\r\nclass App {\r\n  isAsync = true;\r\n  modules: { declarationType: string;\r\n    name: string;\r\n    node: Node\r\n    type: string;\r\n    params?: any[];\r\n    isAsync?: boolean;\r\n  }[] = [];\r\n  selectedModuleName = '';\r\n  selectedModuleParams: Node[] = [];\r\n  //@ts-ignore\r\n  testSuite: Describe; // main Describe\r\n  tryCatchCases: It[] = [];\r\n}\r\nlet APP = new App();\r\n\r\nclass LogicalBranchesGenerator {\r\n  constructor(testNode: Node) {\r\n    this._testNode = testNode;\r\n    this.generateDescribe()\r\n    this.generateBranchesByTestNode(this._testNode, true);\r\n    this.generateTestCases();\r\n  } \r\n\r\n  private _logicalBranches: { name: string }[] = [];\r\n  private _testNode: Node;\r\n  //@ts-ignore\r\n  private _describe: Describe;\r\n\r\n  private generateDescribe = () => {\r\n    const condition = '`if(' + generate(this._testNode).code.replace(/'/g, '`').replace(/\\n/g, ' ')+ ')`';\r\n    this._describe = new Describe(`Logical Branches generated by ${condition}`);\r\n  }\r\n\r\n  // testNode => path.node.test\r\n  private generateBranchesByTestNode = (testNode: Node, isMainNode: boolean) => {\r\n    if (testNode.type === 'LogicalExpression') {\r\n      if (isMainNode) {\r\n        this._logicalBranches.push({\r\n          name: '`the condition returns true`'\r\n        })\r\n        this._logicalBranches.push({\r\n          name: '`the condition returns false`'\r\n        })\r\n      }\r\n\r\n\r\n      this.generateBranchesByTestNode(testNode.left, false);\r\n      this.generateBranchesByTestNode(testNode.right, false);\r\n    } else {\r\n      this._logicalBranches.push({\r\n        name: '`' + generate(testNode).code + ' returns true' + ' - optional`'\r\n      })\r\n      this._logicalBranches.push({\r\n        name: '`' + generate(testNode).code + ' returns false' + '` - optional'\r\n      })\r\n    }\r\n  }\r\n\r\n  private generateTestCases = () => {\r\n    this._logicalBranches.forEach((branch) => {\r\n      const itName = `Should work when ${branch.name.replace(/'/g, '`').replace(/\\n/g, ' ')}`;\r\n\r\n      const it = new It(itName);\r\n      it.generateStructure();\r\n\r\n      this._describe.addTestCase(it)\r\n    })\r\n  }\r\n\r\n  getDescribe = () => {\r\n    return this._describe;\r\n  }\r\n}\r\n\r\nclass Describe {\r\n  constructor(description: string) {\r\n    this._description = description;\r\n  }\r\n\r\n  private _description: string;\r\n  private _describes: Describe[] = [];\r\n  private _testCases: It[] = [];\r\n\r\n  addDiscribe = (discribe: Describe) => {\r\n    this._describes.push(discribe);\r\n  }\r\n\r\n  addTestCase = (testCase: It) => {\r\n    this._testCases.push(testCase);\r\n  }\r\n\r\n  finish = (): string => {\r\n    return `describe('${this._description}', () => {\r\n      beforeEach(async () => {});\r\n\r\n      ${this._testCases.map((it) => it.finish()).join(LINE_BREAK_DOUBLE)}\r\n\r\n      ${this._describes.map((describe) => describe.finish()).join(LINE_BREAK_DOUBLE)}\r\n    })`\r\n  }\r\n}\r\n\r\nclass It {\r\n  constructor(description: string) {\r\n    this._description = description;\r\n  }\r\n\r\n  private _description: string;\r\n  private _lines: string[] = []\r\n\r\n  addLine = (line: string) => {\r\n    this._lines.push(line);\r\n  }\r\n\r\n  addEmptyLine = () => {\r\n    this._lines.push(LINE_BREAK);\r\n  }\r\n\r\n  generateStructure = () => {\r\n    this._lines.push(getParamsAssigment());\r\n    this._lines.push(LINE_BREAK);\r\n    this._lines.push(getFunctionCall());\r\n  }\r\n\r\n  finish = () => {\r\n    return `it('${this._description}', ${APP.isAsync ? 'async' : ''} () => {\r\n      ${this._lines.join(LINE_BREAK)}\r\n    })`\r\n  }\r\n}\r\n\r\n/* returns the param's name */\r\nconst getParamNameByNode = (paramNode: Node): string => {\r\n  if (paramNode.type === 'Identifier') {\r\n    return paramNode.name;\r\n\r\n  } else if (paramNode.type === 'AssignmentPattern') {\r\n    return getParamNameByNode(paramNode.left);\r\n\r\n    // Object as param\r\n  } else if (paramNode.type === 'ObjectPattern') {\r\n    const params: string[] = [];\r\n    paramNode.properties.forEach((innerParamNode) => {\r\n      if (innerParamNode.type === 'ObjectProperty') {\r\n        params.push(getParamNameByNode(innerParamNode.key))\r\n      }\r\n    });\r\n    return `{ ${params.join(', ')} }`;\r\n  }\r\n  \r\n  return '';\r\n}\r\n\r\n/* returns param1, param2, param3 */\r\nconst getParamsForFunction = (): string => {\r\n  return APP.selectedModuleParams.map((paramNode) => getParamNameByNode(paramNode)).join(', ');\r\n}\r\n\r\n/* returns const param1 = 'REPLACE'; const param2 = 'REPLACE'; */\r\nconst getParamsAssigment = (): string => {\r\n  const params: string[] = [];\r\n\r\n  APP.selectedModuleParams.forEach((paramNode) => {\r\n    // Object as params\r\n    if (paramNode.type === 'ObjectPattern') {\r\n      paramNode.properties.forEach((innerParamNode) => {\r\n        if (innerParamNode.type === 'ObjectProperty') {\r\n          params.push(getParamNameByNode(innerParamNode.key))\r\n        }\r\n      });\r\n  \r\n    } else {\r\n      params.push(getParamNameByNode(paramNode))\r\n    }\r\n  })\r\n\r\n  const formattedAssigments = params.map((paramName) => {\r\n    return `const ${paramName} = 'REPLACE';`\r\n  })\r\n\r\n  return formattedAssigments.join(LINE_BREAK)\r\n}\r\n\r\n/* returns const result = function(param1, param2); */\r\nconst getFunctionCall = (): string => {\r\n  return `const result = ${APP.isAsync ? 'await' : ''} ${APP.selectedModuleName}(${getParamsForFunction()});`;\r\n}\r\n\r\nconst getModules = () => {\r\n  return {\r\n    visitor: {\r\n      ExportNamedDeclaration(path: NodePath<ExportNamedDeclaration>) {\r\n        // @ts-ignore\r\n        if (path.node.declaration.id) {\r\n          APP.modules.push({\r\n            // @ts-ignore\r\n            declarationType: path.node.declaration.id.type,\r\n            // @ts-ignore\r\n            name: path.node.declaration.id.name,\r\n            node: path.node,\r\n            type: path.node.type,\r\n          });\r\n        }\r\n        // @ts-ignore\r\n        if (path.node.declaration.declarations) {\r\n          // VariableDeclaration\r\n          // @ts-ignore\r\n          path.node.declaration.declarations.forEach((declaration) => {\r\n            APP.modules.push({\r\n              declarationType: declaration.id.type,\r\n              name: declaration.id.name,\r\n              node: declaration.init,\r\n              params: declaration.init.params,\r\n              isAsync: declaration.init.async,\r\n              type: path.node.type,\r\n            });\r\n          });\r\n        }\r\n        if (path.node.specifiers && path.node.specifiers.length >= 1) {\r\n          path.node.specifiers.forEach((specifier) => {\r\n            APP.modules.push({\r\n              declarationType: specifier.exported.type,\r\n              // @ts-ignore\r\n              name: specifier.exported.name,\r\n              node: path.node,\r\n              type: path.node.type,\r\n            });\r\n          });\r\n        }\r\n        /*if (path.node.declaration?.type === 'VariableDeclaration') {\r\n\r\n        }*/\r\n      },\r\n      ExportDefaultDeclaration(path: NodePath<ExportDefaultDeclaration>) {\r\n        if (path.node.declaration.type === 'Identifier') {\r\n          // TODO: FIX\r\n          return;\r\n        }\r\n\r\n        APP.modules.push({\r\n          declarationType: path.node.declaration.type,\r\n          // @ts-ignore\r\n          name: path.node.declaration.id.name,\r\n          node: path.node,\r\n          type: path.node.type,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst getNodes = () => {\r\n  return {\r\n    visitor: {\r\n      IfStatement: {\r\n        enter: (path: NodePath<IfStatement>) => {\r\n          const logicalBranchesGenerator = new LogicalBranchesGenerator(path.node.test);\r\n          APP.testSuite.addDiscribe(logicalBranchesGenerator.getDescribe());\r\n        },\r\n      },\r\n      ConditionalExpression: {\r\n        enter: (path: NodePath<ConditionalExpression>) => {\r\n          const logicalBranchesGenerator = new LogicalBranchesGenerator(path.node.test);\r\n          APP.testSuite.addDiscribe(logicalBranchesGenerator.getDescribe());\r\n        },\r\n      },\r\n      TryStatement: {\r\n        enter: () => {\r\n          const itName = `Error handling - should execute catch for try number ${APP.tryCatchCases.length + 1}`;\r\n\r\n          const uniTestCase = new It(itName);\r\n          uniTestCase.generateStructure();\r\n          APP.tryCatchCases.push(uniTestCase);\r\n        },\r\n      },\r\n    }\r\n  };\r\n}\r\n\r\nconst buildTestFile = (sourceCode: string, functionName: string) => {\r\n  APP = new App();\r\n\r\n  // Set APP.moduleForPlugin\r\n  transformSync(sourceCode, {\r\n    presets: [babelPresetTypescript],\r\n    plugins: [getModules],\r\n    filename: './temp.ts'\r\n  });\r\n\r\n  // Set selected module values\r\n  const selectedModule = APP.modules.find(({ name }) => name === functionName);\r\n  console.log(selectedModule)\r\n  if (!selectedModule) {\r\n    return 'WRONG FUNCTION NAME'\r\n  }\r\n\r\n  APP.selectedModuleName = selectedModule.name\r\n  // @ts-ignore\r\n  APP.selectedModuleParams = selectedModule.params || selectedModule.node.declaration.params;\r\n  // @ts-ignore\r\n  APP.isAsync = typeof selectedModule.isAsync === 'boolean' ? selectedModule.isAsync : selectedModule.node.declaration.async;\r\n\r\n  // Generate main describe\r\n  APP.testSuite = new Describe(`Module ${APP.selectedModuleName}`)\r\n\r\n  // Generate first it()\r\n  const firstIt = new It('Should work as expected')\r\n  firstIt.generateStructure();\r\n  APP.testSuite.addTestCase(firstIt);\r\n\r\n  // Parse AST to string\r\n  const codeToTransform = generate(selectedModule.node).code\r\n\r\n  transformSync(codeToTransform, {\r\n    presets: [babelPresetTypescript],\r\n    plugins: [getNodes],\r\n    filename: './temp.ts'\r\n  });\r\n\r\n  // Add try/catch statements at the end\r\n  APP.tryCatchCases.map(APP.testSuite.addTestCase)\r\n\r\n  const code = TEMPLATE({ \r\n    MODULE_NAME: APP.selectedModuleName,\r\n    TEST_CASES: APP.testSuite.finish(),\r\n   })\r\n\r\n  const finalCode = prettier.format(code, { singleQuote: true, tabWidth: 2, parser: 'babel', plugins: [prettierBabel, prettierTypescript] })\r\n\r\n  return finalCode;\r\n}\r\n\r\n\r\nexport default buildTestFile;","import testFileGenerator from './testFileGenerator';\nimport './App.css';\n\nfunction App() {\n  const placeholder = `Write your code here\n  1 - Export the function/module that you would like to test\n  2 - Fill the input below\n  3 - Press \"Generate file\" button\n\n  Example 1: \n  export function isValid(param1: string) {\n    let isInvalid = false;\n    if (!param1) {\n      isInvalid = true;\n    }\n    return isInvalid;\n  }\n\n  Example 2: \n  export const isValid = (param1: string) => {\n    let isInvalid = false;\n    if (!param1) {\n      isInvalid = true;\n    }\n    return isInvalid;\n  }\n  `\n\n  const generateUnitTestCases = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n\n    const code = (document.getElementById('code') as HTMLInputElement).value;\n    const functionName = (document.getElementById('functionName') as HTMLInputElement).value;\n\n    if (code && functionName) {\n      const finalCode = testFileGenerator(code, functionName.trim());\n      (document.getElementById('generated') as HTMLInputElement).value = finalCode;\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        JS UNIT TEST FILE GENERATOR BY FARBA\n      </header>\n      <div>\n      <form>\n        <textarea name=\"code\" id=\"code\" rows={50} cols={100} placeholder={placeholder} required/>\n        <textarea name=\"generated\" id=\"generated\" rows={50} cols={100} value=\"The test file will be added here\" readOnly />\n        <br />\n        <span>Module name to test -&gt;</span>\n        <input placeholder=\"Module name to test\" id=\"functionName\" type=\"text\" required/>\n        <button onClick={generateUnitTestCases}>Generate file</button>\n      </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}