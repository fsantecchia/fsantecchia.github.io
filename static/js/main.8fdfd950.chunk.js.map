{"version":3,"sources":["../node_modules/prettier sync","testFileGenerator.ts","App.tsx","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","LINE_BREAK","Describe","description","_description","_describes","_testCases","addDiscribe","discribe","push","addTestCase","testCase","getTestCasesLength","length","finish","map","it","join","describe","this","App","isAsync","modules","selectedModuleName","selectedModuleParams","testSuite","branches","tryCatchDescribe","APP","doesThrowError","node","Boolean","body","some","childNode","type","LogicalBranchesGenerator","statementNode","_logicalBranches","_statementNode","_testNode","_describe","generateBranchesByTestNode","testNode","isMainNode","left","right","isOptional","name","blockStatement","consequent","alternate","generate","generateDescribe","condition","replace","generateTestCases","forEach","branch","helpText","itName","It","addComment","generateErrorStructure","generateStructure","getDescribe","test","_lines","_comment","addLine","line","addEmptyLine","comment","getParamsAssigment","getFunctionCall","getParamNameByNode","paramNode","params","properties","innerParamNode","key","paramName","getModules","visitor","ExportNamedDeclaration","path","declaration","moduleDeclarationNode","declarationType","async","declarations","variableNameNode","declaredVariableNode","init","ExportDefaultDeclaration","tempModuleName","relatedNode","identifierName","allRelatedNodes","container","Array","isArray","findRelatedNodeByPath","getNodes","IfStatement","enter","logicalBranchesGenerator","ConditionalExpression","TryStatement","console","log","uniTestCase","handler","buildTestFile","sourceCode","functionName","transformSync","presets","babelPresetTypescript","plugins","filename","selectedModule","find","firstIt","codeToTransform","MODULE_NAME","TEST_CASES","TEMPLATE","prettier","format","singleQuote","tabWidth","parser","prettierBabel","prettierTypescript","Header","Layout","Footer","Content","placeholder","Form","useForm","form","useState","setCode","generatedCode","setGeneratedCode","className","Title","level","onFinish","document","getElementById","value","finalCode","testFileGenerator","trim","size","align","onValueChange","_code","highlight","languages","js","padding","readOnly","direction","Item","label","required","htmlType","Text","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8fdfd950.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 263;","import { transformSync, Node, NodePath } from '@babel/core';\nimport {\n  ConditionalExpression,\n  ExportDefaultDeclaration,\n  ExportNamedDeclaration,\n  Identifier,\n  BlockStatement,\n  IfStatement,\n  Statement,\n  TryStatement,\n} from \"@babel/types\";\n// @ts-ignore\nimport babelPresetTypescript from '@babel/preset-typescript';\nimport generate from '@babel/generator';\nimport prettier from 'prettier';\nimport prettierBabel from 'prettier/parser-babel';\nimport prettierTypescript from 'prettier/parser-typescript';\n\nconst LINE_BREAK = '\\n';\nconst LINE_BREAK_DOUBLE = '\\n\\n';\n\nconst TEMPLATE = ({\n  MODULE_NAME,\n  TEST_CASES\n}: {\n  MODULE_NAME: string;\n  TEST_CASES: string;\n}) => {return `\n  /*\n   * File generated by https://fsantecchia.github.io\n   */\n\n  import ${MODULE_NAME} from '../${MODULE_NAME}'\n\n  const generateData = async () => {};\n\n  ${TEST_CASES}\n`};\n\nclass Describe {\n  constructor(description: string) {\n    this._description = description;\n  }\n\n  private _description: string;\n  private _describes: Describe[] = [];\n  private _testCases: It[] = [];\n\n  addDiscribe = (discribe: Describe) => {\n    this._describes.push(discribe);\n  }\n\n  addTestCase = (testCase: It) => {\n    this._testCases.push(testCase);\n  }\n\n  getTestCasesLength = () => {\n    return this._testCases.length;\n  }\n\n  finish = (): string => {\n    if (this._describes.length === 0 && this._testCases.length === 0) {\n      return '';\n    }\n\n    return `describe('${this._description}', () => {\n      ${this._testCases.map((it) => it.finish()).join(LINE_BREAK_DOUBLE)}\n\n      ${this._describes.map((describe) => describe.finish()).join(LINE_BREAK_DOUBLE)}\n    })`\n  }\n}\n\nclass App {\n  isAsync = true;\n  modules: { declarationType: string;\n    name: string;\n    node: Node\n    type: string;\n    params: any[];\n    isAsync: boolean;\n  }[] = [];\n  selectedModuleName = '';\n  selectedModuleParams: Node[] = [];\n  //@ts-ignore\n  testSuite: Describe; // main Describe\n  branches: Describe[] = [];\n  tryCatchDescribe: Describe = new Describe(`error handling`);\n}\nlet APP = new App();\n\nconst doesThrowError = (node: BlockStatement | null | undefined): boolean => {\n  return Boolean(node && node.body.some((childNode) => childNode.type === 'ThrowStatement'));\n}\n\nclass LogicalBranchesGenerator {\n  constructor(statementNode: IfStatement | ConditionalExpression) {\n    this._statementNode = statementNode;\n    this._testNode = statementNode.test;\n    this.generateBranchesByTestNode(this._testNode, true);\n    this.generateDescribe()\n    this.generateTestCases();\n  }\n\n  private _logicalBranches: { name: string; blockStatement: BlockStatement | null; isOptional: boolean; }[] = [];\n  private _statementNode: IfStatement | ConditionalExpression;\n  private _testNode: Node;\n  //@ts-ignore\n  private _describe: Describe;\n\n  // testNode => path.node.test\n  private generateBranchesByTestNode = (testNode: Node, isMainNode: boolean) => {\n    if (testNode.type === 'LogicalExpression') {\n      /*if (isMainNode) {\n        this._logicalBranches.push({\n          isOptional: false,\n          name: '`the condition returns true`'\n        })\n\n        if (this._hasAlternate) {\n          this._logicalBranches.push({\n            isOptional: false,\n            name: '`the condition returns false`'\n          })\n        }\n      }*/\n\n      this.generateBranchesByTestNode(testNode.left, false);\n      this.generateBranchesByTestNode(testNode.right, false);\n    } else {\n      if (isMainNode) {\n        this._logicalBranches.push({\n          isOptional: false,\n          name: 'the condition returns `true`',\n          blockStatement: this._statementNode.consequent.type === 'BlockStatement' ? this._statementNode.consequent : null,\n        })\n\n        if (this._statementNode.alternate) {\n          this._logicalBranches.push({\n            isOptional: false,\n            name: 'the condition returns `false`',\n            blockStatement: this._statementNode.alternate.type === 'BlockStatement' ? this._statementNode.alternate : null,\n          })\n        }\n\n      } else {\n        this._logicalBranches.push({\n          isOptional: false, //true,\n          name: '`' + generate(testNode).code + '` returns true',\n          blockStatement: this._statementNode.consequent.type === 'BlockStatement' ? this._statementNode.consequent : null,\n        })\n\n        if (this._statementNode.alternate) {\n          this._logicalBranches.push({\n            isOptional: false, //true,\n            name: '`' + generate(testNode).code + '` returns false',\n            blockStatement: this._statementNode.alternate.type === 'BlockStatement' ? this._statementNode.alternate : null,\n          })\n        }\n      }\n    }\n  }\n\n  private generateDescribe = () => {\n    const condition = '`if(' + generate(this._testNode).code.replace(/'/g, '\"').replace(/\\n/g, ' ')+ ')`';\n    this._describe = new Describe(`branches generated by ${condition}`);\n  }\n\n  private generateTestCases = () => {\n    this._logicalBranches.forEach((branch) => {\n      const helpText = doesThrowError(branch.blockStatement) ? 'throw error' : 'work';\n      const itName = `should ${helpText} when ${branch.name.replace(/'/g, '\"').replace(/\\n/g, ' ')}`;\n\n      const it = new It(itName);\n\n      if (branch.isOptional) {\n        it.addComment('optional test case');\n      }\n\n      if (doesThrowError(branch.blockStatement)) {\n        it.generateErrorStructure();\n      } else {\n        it.generateStructure();\n      }\n\n\n      this._describe.addTestCase(it)\n    })\n  }\n\n  getDescribe = () => {\n    return this._describe;\n  }\n}\n\n\n\nclass It {\n  constructor(description: string) {\n    this._description = description;\n  }\n\n  private _description: string;\n  private _lines: string[] = []\n  private _comment: string = '';\n\n  addLine = (line: string) => {\n    this._lines.push(line);\n  }\n\n  addEmptyLine = () => {\n    this._lines.push(LINE_BREAK);\n  }\n\n  addComment = (comment: string) => {\n    this._comment = `/* ${comment} */ ${LINE_BREAK}`;\n  }\n\n  generateStructure = () => {\n    this._lines.push(`const mockData = await generateData();`);\n    this._lines.push(LINE_BREAK);\n    this._lines.push(getParamsAssigment());\n    this._lines.push(getFunctionCall());\n    this._lines.push(LINE_BREAK);\n    this._lines.push('/* add expect() here */');\n  }\n\n  generateErrorStructure = () => {\n    this._lines.push(`expect.assertions(1);`);\n    this._lines.push(LINE_BREAK);\n    this._lines.push(`const mockData = await generateData();`);\n    this._lines.push(LINE_BREAK);\n    this._lines.push(`try {`);\n    this._lines.push(LINE_BREAK);\n    this._lines.push(getParamsAssigment());\n    this._lines.push(getFunctionCall());\n    this._lines.push(`} catch(error) {`);\n    this._lines.push(LINE_BREAK);\n    this._lines.push('/* add expect() here */');\n    this._lines.push(LINE_BREAK);\n    this._lines.push(`}`);\n  }\n\n  finish = () => {\n    return `${this._comment}it('${this._description}', ${APP.isAsync || true ? 'async' : ''} () => {\n      ${this._lines.join(LINE_BREAK)}\n    })`\n  }\n}\n\n/* returns the param's name */\nconst getParamNameByNode = (paramNode: Node): string => {\n  if (paramNode.type === 'Identifier') {\n    return paramNode.name;\n\n  } else if (paramNode.type === 'AssignmentPattern') {\n    return getParamNameByNode(paramNode.left);\n\n    // Object as param\n  } else if (paramNode.type === 'ObjectPattern') {\n    const params: string[] = [];\n    paramNode.properties.forEach((innerParamNode) => {\n      if (innerParamNode.type === 'ObjectProperty') {\n        params.push(getParamNameByNode(innerParamNode.key))\n      }\n    });\n    return `{ ${params.join(', ')} }`;\n  }\n\n  return '';\n}\n\n/* returns param1, param2, param3 */\nconst getParamsForFunction = (): string => {\n  return APP.selectedModuleParams.map((paramNode) => getParamNameByNode(paramNode)).join(', ');\n}\n\n/* returns const param1 = 'REPLACE'; const param2 = 'REPLACE'; */\nconst getParamsAssigment = (): string => {\n  const params: string[] = [];\n\n  APP.selectedModuleParams.forEach((paramNode) => {\n    // Object as params\n    if (paramNode.type === 'ObjectPattern') {\n      paramNode.properties.forEach((innerParamNode) => {\n        if (innerParamNode.type === 'ObjectProperty') {\n          params.push(getParamNameByNode(innerParamNode.key))\n        }\n      });\n\n    } else {\n      params.push(getParamNameByNode(paramNode))\n    }\n  })\n\n  const formattedAssigments = params.map((paramName) => {\n    return `const ${paramName} = 'REPLACE';`\n  })\n\n  return formattedAssigments.join(LINE_BREAK)\n}\n\n/* returns `const result = function(param1, param2);` */\nconst getFunctionCall = (): string => {\n  return `const result = ${APP.isAsync ? 'await' : ''} ${APP.selectedModuleName}(${getParamsForFunction()});`;\n}\n\n/* returns Node related to `export default IDENTIFIER` */\nconst findRelatedNodeByPath = (path: NodePath<ExportDefaultDeclaration>, identifierName: string): Node | null => {\n  const allRelatedNodes = path.container as Node | Node[];\n  let relatedNode = null;\n\n  if (Array.isArray(allRelatedNodes)) {\n    allRelatedNodes.forEach((node) => {\n      // function\n      if (node.type === 'FunctionDeclaration' && node.id && node.id.name === identifierName) {\n        relatedNode = node;\n      }\n\n      // arrow function\n      if (node.type === 'VariableDeclaration' && node.declarations) {\n        node.declarations.forEach((declaration) => {\n          const variableNameNode = declaration.id;\n          const declaredVariableNode = declaration.init;\n\n          if (\n            declaredVariableNode?.type === 'ArrowFunctionExpression' &&\n            variableNameNode.type === 'Identifier' &&\n            variableNameNode?.name === identifierName\n          ) {\n            relatedNode = declaredVariableNode;\n          }\n\n        });\n      }\n    });\n  }\n\n  return relatedNode;\n};\n\nconst getModules = () => {\n  return {\n    visitor: {\n      ExportNamedDeclaration(path: NodePath<ExportNamedDeclaration>) {\n        if (!path?.node?.declaration) {\n          return ;\n        }\n\n        const moduleDeclarationNode = path.node.declaration;\n\n        if (moduleDeclarationNode.type === 'FunctionDeclaration' && moduleDeclarationNode.id) {\n          APP.modules.push({\n            declarationType: moduleDeclarationNode.id.type,\n            isAsync: moduleDeclarationNode.async || false,\n            name: moduleDeclarationNode.id.name,\n            node: moduleDeclarationNode,\n            params: moduleDeclarationNode.params,\n            type: moduleDeclarationNode.type,\n          });\n        }\n\n        if (moduleDeclarationNode.type === 'VariableDeclaration' && moduleDeclarationNode.declarations) {\n          moduleDeclarationNode.declarations.forEach((declaration) => {\n            const variableNameNode = declaration.id;\n            const declaredVariableNode = declaration.init;\n\n            if (variableNameNode.type === 'Identifier' && declaredVariableNode?.type === 'ArrowFunctionExpression') {\n              APP.modules.push({\n                declarationType: declaredVariableNode.type,\n                isAsync: declaredVariableNode.async || false,\n                name: variableNameNode.name,\n                node: declaredVariableNode,\n                params: declaredVariableNode.params,\n                type: path.node.type,\n              });\n            }\n\n          });\n        }\n      },\n      ExportDefaultDeclaration(path: NodePath<ExportDefaultDeclaration>) {\n        let moduleDeclarationNode: Node = path.node.declaration;\n        let tempModuleName = null;\n        if (moduleDeclarationNode.type === 'Identifier') {\n          tempModuleName = moduleDeclarationNode.name;\n          const relatedNode = findRelatedNodeByPath(path, moduleDeclarationNode.name);\n\n          if (relatedNode) {\n            moduleDeclarationNode = relatedNode;\n          }\n        }\n\n        if (moduleDeclarationNode.type === 'FunctionDeclaration' && moduleDeclarationNode.id) {\n          APP.modules.push({\n            declarationType: moduleDeclarationNode.id.type,\n            isAsync: moduleDeclarationNode.async || false,\n            name: tempModuleName || moduleDeclarationNode?.id?.name || 'NAME NOT FOUND',\n            node: moduleDeclarationNode,\n            params: moduleDeclarationNode.params,\n            type: moduleDeclarationNode.type,\n          });\n        }\n\n        if (moduleDeclarationNode.type === 'ArrowFunctionExpression') {\n          APP.modules.push({\n            declarationType: moduleDeclarationNode.type,\n            isAsync: moduleDeclarationNode.async || false,\n            name: tempModuleName || 'unknown',\n            node: moduleDeclarationNode,\n            params: moduleDeclarationNode.params,\n            type: path.node.type,\n          });\n        }\n      }\n    }\n  }\n}\n\nconst getNodes = () => {\n  return {\n    visitor: {\n      IfStatement: {\n        enter: (path: NodePath<IfStatement>) => {\n          //console.log(path)\n          const logicalBranchesGenerator = new LogicalBranchesGenerator(path.node);\n          APP.branches.push(logicalBranchesGenerator.getDescribe());\n        },\n      },\n      ConditionalExpression: {\n        enter: (path: NodePath<ConditionalExpression>) => {\n          //console.log(path)\n          const logicalBranchesGenerator = new LogicalBranchesGenerator(path.node);\n          APP.branches.push(logicalBranchesGenerator.getDescribe());\n        },\n      },\n      TryStatement: {\n        enter: (path: NodePath<TryStatement>) => {\n          console.log(path);\n          const itName = `should execute catch for try number ${APP.tryCatchDescribe.getTestCasesLength() + 1}`;\n\n          const uniTestCase = new It(itName);\n\n          if (doesThrowError(path.node.handler?.body)) {\n            uniTestCase.generateErrorStructure();\n          } else {\n            uniTestCase.generateStructure();\n          }\n\n          APP.tryCatchDescribe.addTestCase(uniTestCase);\n        },\n      },\n    }\n  };\n}\n\nconst buildTestFile = (sourceCode: string, functionName: string) => {\n  APP = new App();\n\n  // Set APP.moduleForPlugin\n  transformSync(sourceCode, {\n    presets: [babelPresetTypescript],\n    plugins: [getModules],\n    filename: './temp.ts'\n  });\n\n  // Set selected module values\n  const selectedModule = APP.modules.find(({ name }) => name === functionName);\n\n  if (!selectedModule) {\n    return 'WRONG FUNCTION/MODULE NAME'\n  }\n\n  APP.selectedModuleName = selectedModule.name\n  // @ts-ignore\n  APP.selectedModuleParams = selectedModule.params || selectedModule.node.declaration.params;\n  // @ts-ignore\n  APP.isAsync = typeof selectedModule.isAsync === 'boolean' ? selectedModule.isAsync : selectedModule.node.declaration.async;\n  // APP.isAsync = true;\n\n  // Generate main describe\n  APP.testSuite = new Describe(`module ${APP.selectedModuleName}`)\n\n  // Generate first it()\n  const firstIt = new It('should work as expected')\n  firstIt.generateStructure();\n  APP.testSuite.addTestCase(firstIt);\n\n  // Parse AST to string\n  const codeToTransform = generate(selectedModule.node).code\n\n  transformSync(codeToTransform, {\n    presets: [babelPresetTypescript],\n    plugins: [getNodes],\n    filename: './temp.ts'\n  });\n\n  // Add describes\n  APP.branches.map(APP.testSuite.addDiscribe);\n  APP.testSuite.addDiscribe(APP.tryCatchDescribe);\n\n  const code = TEMPLATE({\n    MODULE_NAME: APP.selectedModuleName,\n    TEST_CASES: APP.testSuite.finish(),\n   })\n\n  const finalCode = prettier.format(code, { singleQuote: true, tabWidth: 2, parser: 'babel', plugins: [prettierBabel, prettierTypescript] })\n\n  return finalCode;\n}\n\n\nexport default buildTestFile;","import React, { useState } from 'react';\nimport { Button, Card, Divider, Form, Layout, Image, Input, Space, Typography } from 'antd';\n\nimport Editor from \"react-simple-code-editor\";\n// @ts-ignore\nimport { highlight, languages } from \"prismjs/components/prism-core\";\nimport \"prismjs/components/prism-clike\";\nimport \"prismjs/components/prism-javascript\";\n\n//import exampleImage from './example.gif';\nimport testFileGenerator from './testFileGenerator';\nimport './App.css';\n\nconst { Header, Footer, Content } = Layout;\n\nconst placeholder = `Write your code here\n1 - Export the function/module that you would like to test\n2 - Fill the input below\n3 - Press \"Generate file\" button\n\nExample 1:\nexport function isValid(param1: string) {\n  let isInvalid = false;\n  if (!param1) {\n    isInvalid = true;\n  }\n  return isInvalid;\n}\n\nExample 2:\nexport const isValid = (param1: string) => {\n  let isInvalid = false;\n  if (!param1) {\n    isInvalid = true;\n  }\n  return isInvalid;\n}\n`\n\nfunction App() {\n  const [form] = Form.useForm();\n  const [code, setCode] = useState('');\n  const [generatedCode, setGeneratedCode] = useState(\n    `The test file will be added here`\n  );\n\n  const generateUnitTestCases = () => {\n    const functionName = (document.getElementById('functionName') as HTMLInputElement).value;\n\n    let finalCode = '';\n    if (code && functionName) {\n      finalCode = testFileGenerator(code, functionName.trim());\n    } else {\n      finalCode = 'MISSING PARAMETERS'\n    }\n\n    setGeneratedCode(finalCode);\n  }\n\n  return (\n    <div className=\"App background-color\">\n      <Layout>\n\n        <Header className=\"background-color\">\n          <Typography.Title level={1}>\n            Generate unit tests for your code!\n          </Typography.Title>\n        </Header>\n\n        <Content className=\"background-color\">\n          <Form form={form} onFinish={generateUnitTestCases}>\n\n            <div>\n              <Space size=\"middle\" align=\"center\">\n                <div className=\"code-editor-container\">\n                  <Editor\n                    value={code}\n                    onValueChange={(_code) => setCode(_code)}\n                    highlight={(_code) => highlight(_code, languages.js)}\n                    padding={10}\n                    className=\"code-editor\"\n                    placeholder={placeholder}\n                  />\n                </div>\n                <div className=\"code-editor-container\">\n                  <Editor\n                    value={generatedCode}\n                    onValueChange={(_code) => setGeneratedCode(_code)}\n                    highlight={(_code) => highlight(_code, languages.js)}\n                    padding={10}\n                    className=\"code-editor\"\n                    placeholder={placeholder}\n                    readOnly\n                  />\n                </div>\n              </Space>\n            </div>\n\n            <br />\n\n            <Space>\n              <Card className=\"background-color\">\n                <Space size=\"middle\" align=\"center\" direction=\"vertical\">\n                  <Form.Item\n                    label=\"Module to test\"\n                    name=\"functionName\"\n                  /*rules={[{ required: true, message: 'Please input your username!' }]}*/\n                  >\n                    <Input id=\"functionName\" placeholder=\"Example: isValid\" required />\n                  </Form.Item>\n                  <Button type=\"primary\" htmlType=\"submit\">Generate file</Button>\n                </Space>\n              </Card>\n            </Space>\n\n          </Form>\n\n          <Divider />\n\n          {/*<Space size=\"middle\" align=\"center\" direction=\"vertical\">\n            <Typography.Title level={2}>\n              How to use\n            </Typography.Title>\n\n            <Image src={exampleImage} width={1280} height={720} />\n          </Space>*/}\n\n          <Space size=\"middle\" align=\"center\" direction=\"vertical\">\n            <Typography.Title level={2}>\n              Command to run test locally\n            </Typography.Title>\n            <Typography.Text>\n              Replace 'FILE_PATH' and 'TEST_FILE_PATH'\n            </Typography.Text>\n            <Typography.Text>\n              node ./node_modules/.bin/jest --collectCoverage --coverageReporters=text --collectCoverageFrom=FILE_PATH TEST_FILE_PATH\n            </Typography.Text>\n          </Space>\n\n        </Content>\n\n        <Footer className=\"background-color\">by Fabra 2021</Footer>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}