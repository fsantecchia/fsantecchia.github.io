{"version":3,"sources":["../node_modules/prettier sync","example.gif","testFileGenerator.ts","App.tsx","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","LINE_BREAK","Describe","description","_description","_describes","_testCases","addDiscribe","discribe","push","addTestCase","testCase","getTestCasesLength","length","finish","map","it","join","describe","this","App","isAsync","modules","selectedModuleName","selectedModuleParams","testSuite","branches","tryCatchDescribe","APP","LogicalBranchesGenerator","testNode","_logicalBranches","_testNode","_describe","generateBranchesByTestNode","isMainNode","type","isOptional","name","left","right","generate","generateDescribe","condition","replace","generateTestCases","forEach","branch","itName","It","addComment","generateStructure","getDescribe","_lines","_comment","addLine","line","addEmptyLine","comment","getParamsAssigment","getFunctionCall","getParamNameByNode","paramNode","params","properties","innerParamNode","key","paramName","getModules","visitor","ExportNamedDeclaration","path","node","declaration","moduleDeclarationNode","declarationType","async","declarations","variableNameNode","declaredVariableNode","init","ExportDefaultDeclaration","tempModuleName","relatedNode","identifierName","allRelatedNodes","container","Array","isArray","findRelatedNodeByPath","getNodes","IfStatement","enter","logicalBranchesGenerator","test","ConditionalExpression","TryStatement","uniTestCase","buildTestFile","sourceCode","functionName","transformSync","presets","babelPresetTypescript","plugins","filename","selectedModule","find","firstIt","codeToTransform","MODULE_NAME","TEST_CASES","TEMPLATE","prettier","format","singleQuote","tabWidth","parser","prettierBabel","prettierTypescript","Header","Layout","Footer","Content","placeholder","Form","useForm","form","useState","setCode","generatedCode","setGeneratedCode","className","Title","level","onFinish","document","getElementById","value","finalCode","testFileGenerator","trim","size","align","onValueChange","_code","highlight","languages","js","padding","readOnly","direction","Item","label","required","htmlType","src","exampleImage","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.999401f6.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 270;","export default __webpack_public_path__ + \"static/media/example.814719f1.gif\";","import { transformSync, Node, NodePath } from '@babel/core';\r\nimport { \r\n  ConditionalExpression,\r\n  ExportDefaultDeclaration, \r\n  ExportNamedDeclaration, \r\n  Identifier,\r\n  IfStatement,\r\n} from \"@babel/types\";\r\n// @ts-ignore\r\nimport babelPresetTypescript from '@babel/preset-typescript';\r\nimport generate from '@babel/generator';\r\nimport prettier from 'prettier';\r\nimport prettierBabel from 'prettier/parser-babel';\r\nimport prettierTypescript from 'prettier/parser-typescript';\r\n\r\nconst LINE_BREAK = '\\n';\r\nconst LINE_BREAK_DOUBLE = '\\n\\n';\r\n\r\nconst TEMPLATE = ({\r\n  MODULE_NAME,\r\n  TEST_CASES\r\n}: {\r\n  MODULE_NAME: string;\r\n  TEST_CASES: string;\r\n}) => {return `\r\n  /* \r\n   * File generated by https://fsantecchia.github.io \r\n   */\r\n\r\n  import ${MODULE_NAME} from '../${MODULE_NAME}'\r\n\r\n  ${TEST_CASES}\r\n`};\r\n\r\nclass Describe {\r\n  constructor(description: string) {\r\n    this._description = description;\r\n  }\r\n\r\n  private _description: string;\r\n  private _describes: Describe[] = [];\r\n  private _testCases: It[] = [];\r\n\r\n  addDiscribe = (discribe: Describe) => {\r\n    this._describes.push(discribe);\r\n  }\r\n\r\n  addTestCase = (testCase: It) => {\r\n    this._testCases.push(testCase);\r\n  }\r\n\r\n  getTestCasesLength = () => {\r\n    return this._testCases.length;\r\n  }\r\n\r\n  finish = (): string => {\r\n    if (this._describes.length === 0 && this._testCases.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    return `describe('${this._description}', () => {\r\n      beforeEach(async () => {});\r\n\r\n      ${this._testCases.map((it) => it.finish()).join(LINE_BREAK_DOUBLE)}\r\n\r\n      ${this._describes.map((describe) => describe.finish()).join(LINE_BREAK_DOUBLE)}\r\n    })`\r\n  }\r\n}\r\n\r\nclass App {\r\n  isAsync = true;\r\n  modules: { declarationType: string;\r\n    name: string;\r\n    node: Node\r\n    type: string;\r\n    params: any[];\r\n    isAsync: boolean;\r\n  }[] = [];\r\n  selectedModuleName = '';\r\n  selectedModuleParams: Node[] = [];\r\n  //@ts-ignore\r\n  testSuite: Describe; // main Describe\r\n  branches: Describe[] = [];\r\n  tryCatchDescribe: Describe = new Describe(`error handling`);\r\n}\r\nlet APP = new App();\r\n\r\nclass LogicalBranchesGenerator {\r\n  constructor(testNode: Node) {\r\n    this._testNode = testNode;\r\n    this.generateBranchesByTestNode(this._testNode, true);\r\n    this.generateDescribe()\r\n    this.generateTestCases();\r\n  } \r\n\r\n  private _logicalBranches: { name: string; isOptional: boolean; }[] = [];\r\n  private _testNode: Node;\r\n  //@ts-ignore\r\n  private _describe: Describe;\r\n\r\n  // testNode => path.node.test\r\n  private generateBranchesByTestNode = (testNode: Node, isMainNode: boolean) => {\r\n    if (testNode.type === 'LogicalExpression') {\r\n      if (isMainNode) {\r\n        this._logicalBranches.push({\r\n          isOptional: false,\r\n          name: '`the condition returns true`'\r\n        })\r\n        this._logicalBranches.push({\r\n          isOptional: false,\r\n          name: '`the condition returns false`'\r\n        })\r\n      }\r\n\r\n      this.generateBranchesByTestNode(testNode.left, false);\r\n      this.generateBranchesByTestNode(testNode.right, false);\r\n    } else {\r\n      if (isMainNode) {\r\n        this._logicalBranches.push({\r\n          isOptional: false,\r\n          name: '`the condition returns true`'\r\n        })\r\n        this._logicalBranches.push({\r\n          isOptional: false,\r\n          name: '`the condition returns false`'\r\n        })\r\n      } else {\r\n        this._logicalBranches.push({\r\n          isOptional: true,\r\n          name: '`' + generate(testNode).code + ' returns true' + '`'\r\n        })\r\n        this._logicalBranches.push({\r\n          isOptional: true,\r\n          name: '`' + generate(testNode).code + ' returns false' + '`'\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  private generateDescribe = () => {\r\n    const condition = '`if(' + generate(this._testNode).code.replace(/'/g, '`').replace(/\\n/g, ' ')+ ')`';\r\n    this._describe = new Describe(`branches generated by ${condition}`);\r\n  }\r\n\r\n  private generateTestCases = () => {\r\n    this._logicalBranches.forEach((branch) => {\r\n      const itName = `should work when ${branch.name.replace(/'/g, '`').replace(/\\n/g, ' ')}`;\r\n\r\n      const it = new It(itName);\r\n\r\n      if (branch.isOptional) {\r\n        it.addComment('optional test case');\r\n      }\r\n\r\n      it.generateStructure();\r\n\r\n      this._describe.addTestCase(it)\r\n    })\r\n  }\r\n\r\n  getDescribe = () => {\r\n    return this._describe;\r\n  }\r\n}\r\n\r\n\r\n\r\nclass It {\r\n  constructor(description: string) {\r\n    this._description = description;\r\n  }\r\n\r\n  private _description: string;\r\n  private _lines: string[] = []\r\n  private _comment: string = '';\r\n\r\n  addLine = (line: string) => {\r\n    this._lines.push(line);\r\n  }\r\n\r\n  addEmptyLine = () => {\r\n    this._lines.push(LINE_BREAK);\r\n  }\r\n\r\n  addComment = (comment: string) => {\r\n    this._comment = `/* ${comment} */ ${LINE_BREAK}`;\r\n  }\r\n\r\n  generateStructure = () => {\r\n    this._lines.push(getParamsAssigment());\r\n    this._lines.push(LINE_BREAK);\r\n    this._lines.push(getFunctionCall());\r\n    this._lines.push(LINE_BREAK);\r\n    this._lines.push('/* add expect() here */');\r\n  }\r\n\r\n  finish = () => {\r\n    return `${this._comment}it('${this._description}', ${APP.isAsync ? 'async' : ''} () => {\r\n      ${this._lines.join(LINE_BREAK)}\r\n    })`\r\n  }\r\n}\r\n\r\n/* returns the param's name */\r\nconst getParamNameByNode = (paramNode: Node): string => {\r\n  if (paramNode.type === 'Identifier') {\r\n    return paramNode.name;\r\n\r\n  } else if (paramNode.type === 'AssignmentPattern') {\r\n    return getParamNameByNode(paramNode.left);\r\n\r\n    // Object as param\r\n  } else if (paramNode.type === 'ObjectPattern') {\r\n    const params: string[] = [];\r\n    paramNode.properties.forEach((innerParamNode) => {\r\n      if (innerParamNode.type === 'ObjectProperty') {\r\n        params.push(getParamNameByNode(innerParamNode.key))\r\n      }\r\n    });\r\n    return `{ ${params.join(', ')} }`;\r\n  }\r\n  \r\n  return '';\r\n}\r\n\r\n/* returns param1, param2, param3 */\r\nconst getParamsForFunction = (): string => {\r\n  return APP.selectedModuleParams.map((paramNode) => getParamNameByNode(paramNode)).join(', ');\r\n}\r\n\r\n/* returns const param1 = 'REPLACE'; const param2 = 'REPLACE'; */\r\nconst getParamsAssigment = (): string => {\r\n  const params: string[] = [];\r\n\r\n  APP.selectedModuleParams.forEach((paramNode) => {\r\n    // Object as params\r\n    if (paramNode.type === 'ObjectPattern') {\r\n      paramNode.properties.forEach((innerParamNode) => {\r\n        if (innerParamNode.type === 'ObjectProperty') {\r\n          params.push(getParamNameByNode(innerParamNode.key))\r\n        }\r\n      });\r\n  \r\n    } else {\r\n      params.push(getParamNameByNode(paramNode))\r\n    }\r\n  })\r\n\r\n  const formattedAssigments = params.map((paramName) => {\r\n    return `const ${paramName} = 'REPLACE';`\r\n  })\r\n\r\n  return formattedAssigments.join(LINE_BREAK)\r\n}\r\n\r\n/* returns `const result = function(param1, param2);` */\r\nconst getFunctionCall = (): string => {\r\n  return `const result = ${APP.isAsync ? 'await' : ''} ${APP.selectedModuleName}(${getParamsForFunction()});`;\r\n}\r\n\r\n/* returns Node related to `export default IDENTIFIER` */\r\nconst findRelatedNodeByPath = (path: NodePath, identifierName: string): Node | null => {\r\n  const allRelatedNodes = path.container as Node | Node[];\r\n  let relatedNode = null;\r\n\r\n  if (Array.isArray(allRelatedNodes)) {\r\n    allRelatedNodes.forEach((node) => {\r\n      // function\r\n      if (node.type === 'FunctionDeclaration' && node.id && node.id.name === identifierName) {\r\n        relatedNode = node;\r\n      }\r\n\r\n      // arrow function\r\n      if (node.type === 'VariableDeclaration' && node.declarations) {\r\n        node.declarations.forEach((declaration) => {\r\n          const variableNameNode = declaration.id;\r\n          const declaredVariableNode = declaration.init;\r\n\r\n          if (\r\n            declaredVariableNode?.type === 'ArrowFunctionExpression' && \r\n            variableNameNode.type === 'Identifier' && \r\n            variableNameNode?.name === identifierName\r\n          ) {\r\n            relatedNode = declaredVariableNode;\r\n          }\r\n\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  return relatedNode;\r\n};\r\n\r\nconst getModules = () => {\r\n  return {\r\n    visitor: {\r\n      ExportNamedDeclaration(path: NodePath<ExportNamedDeclaration>) {\r\n        if (!path?.node?.declaration) {\r\n          return ;\r\n        }\r\n\r\n        const moduleDeclarationNode = path.node.declaration;\r\n        \r\n        if (moduleDeclarationNode.type === 'FunctionDeclaration' && moduleDeclarationNode.id) {\r\n          APP.modules.push({\r\n            declarationType: moduleDeclarationNode.id.type,\r\n            isAsync: moduleDeclarationNode.async || false,\r\n            name: moduleDeclarationNode.id.name,\r\n            node: moduleDeclarationNode,\r\n            params: moduleDeclarationNode.params,\r\n            type: moduleDeclarationNode.type,\r\n          });\r\n        }\r\n\r\n        if (moduleDeclarationNode.type === 'VariableDeclaration' && moduleDeclarationNode.declarations) {\r\n          moduleDeclarationNode.declarations.forEach((declaration) => {\r\n            const variableNameNode = declaration.id;\r\n            const declaredVariableNode = declaration.init;\r\n\r\n            if (variableNameNode.type === 'Identifier' && declaredVariableNode?.type === 'ArrowFunctionExpression') {\r\n              APP.modules.push({\r\n                declarationType: declaredVariableNode.type,\r\n                isAsync: declaredVariableNode.async || false,\r\n                name: variableNameNode.name,\r\n                node: declaredVariableNode,\r\n                params: declaredVariableNode.params,\r\n                type: path.node.type,\r\n              });\r\n            }\r\n\r\n          });\r\n        }\r\n      },\r\n      ExportDefaultDeclaration(path: NodePath<ExportDefaultDeclaration>) {\r\n        let moduleDeclarationNode: Node = path.node.declaration;\r\n        let tempModuleName = null;\r\n        if (moduleDeclarationNode.type === 'Identifier') {\r\n          tempModuleName = moduleDeclarationNode.name;\r\n          const relatedNode = findRelatedNodeByPath(path, moduleDeclarationNode.name);\r\n\r\n          if (relatedNode) {\r\n            moduleDeclarationNode = relatedNode;\r\n          }\r\n        }\r\n        \r\n        if (moduleDeclarationNode.type === 'FunctionDeclaration' && moduleDeclarationNode.id) {\r\n          APP.modules.push({\r\n            declarationType: moduleDeclarationNode.id.type,\r\n            isAsync: moduleDeclarationNode.async || false,\r\n            name: tempModuleName || moduleDeclarationNode.id.name,\r\n            node: moduleDeclarationNode,\r\n            params: moduleDeclarationNode.params,\r\n            type: moduleDeclarationNode.type,\r\n          });\r\n        }\r\n\r\n        if (moduleDeclarationNode.type === 'ArrowFunctionExpression') {\r\n          APP.modules.push({\r\n            declarationType: moduleDeclarationNode.type,\r\n            isAsync: moduleDeclarationNode.async || false,\r\n            name: tempModuleName || 'unknown',\r\n            node: moduleDeclarationNode,\r\n            params: moduleDeclarationNode.params,\r\n            type: path.node.type,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst getNodes = () => {\r\n  return {\r\n    visitor: {\r\n      IfStatement: {\r\n        enter: (path: NodePath<IfStatement>) => {\r\n          const logicalBranchesGenerator = new LogicalBranchesGenerator(path.node.test);\r\n          APP.branches.push(logicalBranchesGenerator.getDescribe());\r\n        },\r\n      },\r\n      ConditionalExpression: {\r\n        enter: (path: NodePath<ConditionalExpression>) => {\r\n          const logicalBranchesGenerator = new LogicalBranchesGenerator(path.node.test);\r\n          APP.branches.push(logicalBranchesGenerator.getDescribe());\r\n        },\r\n      },\r\n      TryStatement: {\r\n        enter: () => {\r\n          const itName = `should execute catch for try number ${APP.tryCatchDescribe.getTestCasesLength() + 1}`;\r\n\r\n          const uniTestCase = new It(itName);\r\n          uniTestCase.generateStructure();\r\n          APP.tryCatchDescribe.addTestCase(uniTestCase);\r\n        },\r\n      },\r\n    }\r\n  };\r\n}\r\n\r\nconst buildTestFile = (sourceCode: string, functionName: string) => {\r\n  APP = new App();\r\n\r\n  // Set APP.moduleForPlugin\r\n  transformSync(sourceCode, {\r\n    presets: [babelPresetTypescript],\r\n    plugins: [getModules],\r\n    filename: './temp.ts'\r\n  });\r\n\r\n  // Set selected module values\r\n  const selectedModule = APP.modules.find(({ name }) => name === functionName);\r\n\r\n  if (!selectedModule) {\r\n    return 'WRONG FUNCTION NAME'\r\n  }\r\n\r\n  APP.selectedModuleName = selectedModule.name\r\n  // @ts-ignore\r\n  APP.selectedModuleParams = selectedModule.params || selectedModule.node.declaration.params;\r\n  // @ts-ignore\r\n  APP.isAsync = typeof selectedModule.isAsync === 'boolean' ? selectedModule.isAsync : selectedModule.node.declaration.async;\r\n\r\n  // Generate main describe\r\n  APP.testSuite = new Describe(`module ${APP.selectedModuleName}`)\r\n\r\n  // Generate first it()\r\n  const firstIt = new It('should work as expected')\r\n  firstIt.generateStructure();\r\n  APP.testSuite.addTestCase(firstIt);\r\n\r\n  // Parse AST to string\r\n  const codeToTransform = generate(selectedModule.node).code\r\n\r\n  transformSync(codeToTransform, {\r\n    presets: [babelPresetTypescript],\r\n    plugins: [getNodes],\r\n    filename: './temp.ts'\r\n  });\r\n\r\n  // Add describes\r\n  APP.branches.map(APP.testSuite.addDiscribe);\r\n  APP.testSuite.addDiscribe(APP.tryCatchDescribe);\r\n\r\n  const code = TEMPLATE({ \r\n    MODULE_NAME: APP.selectedModuleName,\r\n    TEST_CASES: APP.testSuite.finish(),\r\n   })\r\n\r\n  const finalCode = prettier.format(code, { singleQuote: true, tabWidth: 2, parser: 'babel', plugins: [prettierBabel, prettierTypescript] })\r\n\r\n  return finalCode;\r\n}\r\n\r\n\r\nexport default buildTestFile;","import { useState } from 'react';\nimport { Button, Card, Divider, Form, Layout, Image, Input, Space, Typography } from 'antd';\n\nimport Editor from \"react-simple-code-editor\";\n// @ts-ignore\nimport { highlight, languages } from \"prismjs/components/prism-core\";\nimport \"prismjs/components/prism-clike\";\nimport \"prismjs/components/prism-javascript\";\n\nimport exampleImage from './example.gif';\nimport testFileGenerator from './testFileGenerator';\nimport './App.css';\n\nconst { Header, Footer, Content } = Layout;\n\nconst placeholder = `Write your code here\n1 - Export the function/module that you would like to test\n2 - Fill the input below\n3 - Press \"Generate file\" button\n\nExample 1: \nexport function isValid(param1: string) {\n  let isInvalid = false;\n  if (!param1) {\n    isInvalid = true;\n  }\n  return isInvalid;\n}\n\nExample 2: \nexport const isValid = (param1: string) => {\n  let isInvalid = false;\n  if (!param1) {\n    isInvalid = true;\n  }\n  return isInvalid;\n}\n`\n\nfunction App() {\n  const [form] = Form.useForm();\n  const [code, setCode] = useState('');\n  const [generatedCode, setGeneratedCode] = useState(\n    `The test file will be added here`\n  );\n\n  const generateUnitTestCases = () => {\n    const functionName = (document.getElementById('functionName') as HTMLInputElement).value;\n\n    let finalCode = '';\n    if (code && functionName) {\n      finalCode = testFileGenerator(code, functionName.trim());\n    } else {\n      finalCode = 'MISSING PARAMETERS'\n    }\n\n    setGeneratedCode(finalCode);\n  }\n\n  return (\n    <div className=\"App background-color\">\n      <Layout>\n\n        <Header className=\"background-color\">\n          <Typography.Title level={1}>\n            Generate unit tests for your code!\n          </Typography.Title>\n        </Header>\n\n        <Content className=\"background-color\">\n          <Form form={form} onFinish={generateUnitTestCases}>\n\n            <div>\n              <Space size=\"middle\" align=\"center\">\n                <div className=\"code-editor-container\">\n                  <Editor\n                    value={code}\n                    onValueChange={(_code) => setCode(_code)}\n                    highlight={(_code) => highlight(_code, languages.js)}\n                    padding={10}\n                    className=\"code-editor\"\n                    placeholder={placeholder}\n                  />\n                </div>\n                <div className=\"code-editor-container\">\n                  <Editor\n                    value={generatedCode}\n                    onValueChange={(_code) => setGeneratedCode(_code)}\n                    highlight={(_code) => highlight(_code, languages.js)}\n                    padding={10}\n                    className=\"code-editor\"\n                    placeholder={placeholder}\n                    readOnly\n                  />\n                </div>\n              </Space>\n            </div>\n\n            <br />\n            \n            <Space>\n              <Card className=\"background-color\">\n                <Space size=\"middle\" align=\"center\" direction=\"vertical\">\n                  <Form.Item\n                    label=\"Module to test\"\n                    name=\"functionName\"\n                  /*rules={[{ required: true, message: 'Please input your username!' }]}*/\n                  >\n                    <Input id=\"functionName\" placeholder=\"Example: isValid\" required />\n                  </Form.Item>\n                  <Button type=\"primary\" htmlType=\"submit\">Generate file</Button>\n                </Space>\n              </Card>\n            </Space>\n\n          </Form>\n\n          <Divider />\n\n          <Space size=\"middle\" align=\"center\" direction=\"vertical\">\n            <Typography.Title level={2}>\n              How to use\n            </Typography.Title>\n\n            <Image src={exampleImage} width={1280} height={720} />\n          </Space>\n\n        </Content>\n\n        <Footer className=\"background-color\">by Fabra 2021</Footer>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}